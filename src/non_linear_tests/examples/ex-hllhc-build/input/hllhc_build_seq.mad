! -----------------------------------------------------------------------------o
! translated by "hand" by L. Deniau 2019.12.15 from hllhc_sequence.madx
! first pass of preprocessing was done by MAD-NG
! -----------------------------------------------------------------------------o

!-------------------------------------------------------------------
! Remove install old and new elements
! Triplets, interconnection lenghts and MS positions are defined
! by the calling program
! ------------------------------------------------------------------

local print, assert, ipairs in _G
local option                in MAD
local selected              in MAD.element.flags

-- helper to remove and install element from lists
local function rem_ins (seq, rlst, ilst)
  local er, ir = {}, {}

  if #rlst > 0 then seq:deselect()
    for _,e in ipairs(rlst) do
      if seq[e] then seq[e]:select() end
    end
    er, ir = seq:remove{flag=selected}
  end
  if #ilst > 0 then seq:install(ilst) end

  if option.debug > 0 then
    local io in _G
    io.write("seqedit -- number of element removed:  ", #(er or {}), " (", #rlst, ")\n")
    io.write("seqedit -- number of element installed:", #ilst, "\n")
  end
  return er, ir
end

-- select kind of beam for SLHCB2 (or SLHCB4)
! mylhcbeam=4 for Beam 4

-- LHCB2 as LHCB4
bv_aux = mylhcbeam > 2 and -1 or 1
--lhcb2  = mylhcbeam > 2 and lhcb2:reflect() or lhcb2 ! guessed!

if on_layout_custom == 0 then
  l_mqxfa     =          4.2000000000
  l_mqxfb     =          7.1500000000
  dq1aq1b     =          0.6060000000 -0.014
  dq1q2a      =          3.6280000000 +0.005
  dq2aq2b     =          2.1080000000 +0.004
  dq2bq3      =          3.6280000000 +0.005
  deltaposd2  =        -15.805
  deltaposq4  =         10.500
  deltaposq5  =         10.500
  deltaposq6  =          0.0000000000
  deltaposcrab=                     0
  deltaposmcbrd=                    0
  deltapostaxn =                    0
  on_cutms_10f =          0
  on_cutms_14f =          0
  on_cutms_10d =          0
  on_cutms_14d =          0
  l_mbxf      =          6.27
  l_mcbxfb    =          1.2
  l_mcbxfa    =          2.2
  l_mbrd      =          7.778
  l_mcbrd     =          1.930
end

!value, l.MQXL,l.MQX,dq1q2a,dq2aq2b,dq2bq3;
!value, deltaposD2;
!value, deltaposQ4;
!value, deltaposQ5;
!value, deltaposQ6;

!===============================================
! REMOVE CURRENT INSERTION (from TAS to Q6)
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: remove from TAS to Q6")
end

brho = 23348.89927

posmarke=15
!posmarks=163.0  ! include D2
!posmarks=184    ! include Q4
!posmarks=240    ! include Q6
posmarks=259     ! include Q6 DFBAJ DFBAI

-- LHCB1 -----------------------------o

if bv_aux == 1 then
  lhcb1:deselect()
  lhcb1:select {-posmarks,-posmarke,'IP1.L1' }
  lhcb1:select { posmarke, posmarks,'IP1'    }
  lhcb1:select {-posmarks,-posmarke,'IP5'    }
  lhcb1:select { posmarke, posmarks,'IP5'    }
  lhcb1:select { class = brana    }  -- BUG: useless!
  lhcb1:select { class = x1fcl    }  -- BUG: useless!
  lhcb1:select { class = x1fcr    }  -- BUG: useless!
  lhcb1:select { class = x1zdc001 }  -- BUG: not installed!
  lhcb1:select { class = x5zdc001 }  -- BUG: not installed!
  lhcb1:select { class = x5zdc002 }  -- BUG: not installed!
  lhcb1:remove{flag=selected}

  local er, ir = rem_ins(lhcb1, {
    'MCBCH.10L1.B1', 'MCBCV.10R1.B1', 'MCBCH.10L5.B1', 'MCBCV.10R5.B1',
    'MS.10L1.B1'   , 'MS.10R1.B1'   , 'MS.10L5.B1'   , 'MS.10R5.B1'   ,     -- BUG: not installed!
    'MCBH.10L1.B1' , 'MCBV.10R1.B1' , 'MCBH.10L5.B1' , 'MCBV.10R5.B1' },{}) -- BUG: not installed!
--print(#er, #ir, #lhcb1)
end

-- LHCB2/LHCB4 -----------------------o

local posmarks2 = bv_aux > 0 and posmarks or posmarke -- swap positions for lhcb4
local posmarke2 = bv_aux > 0 and posmarke or posmarks

!print(bv_aux,-posmarks2*bv_aux,-posmarke2*bv_aux)

lhcb2:deselect()
lhcb2:select {-posmarks2*bv_aux,-posmarke2*bv_aux,'IP1.L1'}
lhcb2:select { posmarke2*bv_aux, posmarks2*bv_aux,'IP1'   }
lhcb2:select {-posmarks2*bv_aux,-posmarke2*bv_aux,'IP5'   }
lhcb2:select { posmarke2*bv_aux, posmarks2*bv_aux,'IP5'   }
lhcb2:select { class = brana    }  -- useless!
lhcb2:select { class = x1fcl    }  -- useless!
lhcb2:select { class = x1fcr    }  -- useless!
lhcb2:select { class = x1zdc001 }  -- not installed!
lhcb2:select { class = x5zdc001 }  -- not installed!
lhcb2:select { class = x5zdc002 }  -- not installed!
lhcb2:remove{flag=selected}

local er, ir = rem_ins(lhcb2, {
  'MCBCV.10L1.B2', 'MCBCH.10R1.B2', 'MCBCV.10L5.B2', 'MCBCH.10R5.B2',
  'MS.10L1.B2'   , 'MS.10R1.B2'   , 'MS.10L5.B2'   , 'MS.10R5.B2'   ,      -- BUG: not installed!
  'MCBV.10L1.B2' , 'MCBH.10R1.B2' , 'MCBV.10L5.B2' , 'MCBH.10R5.B2' }, {}) -- BUG: not installed!
--print(#er, #ir, #lhcb2)

! ===============================================
! macros for installation
! ===============================================

local function install_ir15 (ENAM, SPOS, B1, B2)
  assert(#ENAM >= 1, "invalid list of names")
  assert(#SPOS == 8, "invalid list of positions")
  local ENAM1, ENAM2 = ENAM[1], ENAM[2] or ENAM[1]
  B1, B2 = B1 or '.B1', B2 or '.B2'

  if bv_aux == 1 then
    lhcb1:install {
      MADX[ENAM1..'L1'..B1] :setvar {at=SPOS[1], from='IP1.L1'},
      MADX[ENAM2..'R1'..B1] :setvar {at=SPOS[2], from='IP1'   },
      MADX[ENAM1..'L5'..B1] :setvar {at=SPOS[3], from='IP5'   },
      MADX[ENAM2..'R5'..B1] :setvar {at=SPOS[4], from='IP5'   },
    }
  end
  lhcb2:install {
    MADX[ENAM2..'L1'..B2] :setvar {at=SPOS[5]*bv_aux, from='IP1.L1'},
    MADX[ENAM1..'R1'..B2] :setvar {at=SPOS[6]*bv_aux, from='IP1'   },
    MADX[ENAM2..'L5'..B2] :setvar {at=SPOS[7]*bv_aux, from='IP5'   },
    MADX[ENAM1..'R5'..B2] :setvar {at=SPOS[8]*bv_aux, from='IP5'   },
  }
end

local install_ir15_cmn = \enam,s ->
      install_ir15({enam},{-s,s,-s,s, -s,s,-s,s},'','')

local install_ir15_b12 = \enam,s ->
      install_ir15({enam},{-s,s,-s,s, -s,s,-s,s})

local install_ir15_b1_b2 = \enam,s1,s2 ->
      install_ir15({enam},{-s1,s1,-s1,s1, -s2,s2,-s2,s2,})

local install_ir15_b1_b2_inv = \enam,s1,s2 ->
      install_ir15({enam},{-s2,s1,-s1,s2, -s2,s1,-s1,s2})

local install_ir15_b1_b2_alt = \enam,s1,s2 ->
      install_ir15({enam},{-s1,s2,-s1,s2, -s2,s1,-s2,s1})

local install_ir15_b1_b2_alt2 = \enam1,enam2,s1,s2 ->
      install_ir15({enam1,enam2},{-s1,s2,-s1,s2, -s2,s1,-s2,s1})

local install_ir15_b1_b2_alt4 = \enam1,enam2,s1,s2,s3,s4 ->
      install_ir15({enam1,enam2},{-s1,s1,-s3,s3, -s2,s2,-s4,s4})

local install_ir15_cmn4 = \enam,s1,s2,s3,s4 ->
      install_ir15({enam},{-s1,s2,-s3,s4, -s2,s1,-s4,s3},'','')

local function newel_ir15_b12 (ENAM, PARE, MECHSEP)
    MADX[ENAM..'l1_b1'] = PARE (ENAM..'L1.B1', { mech_sep=-MECHSEP }       )
    MADX[ENAM..'r1_b1'] = PARE (ENAM..'R1.B1', { mech_sep= MECHSEP }       )
    MADX[ENAM..'l5_b1'] = PARE (ENAM..'L5.B1', { mech_sep=-MECHSEP }       )
    MADX[ENAM..'r5_b1'] = PARE (ENAM..'R5.B1', { mech_sep= MECHSEP }       )
    MADX[ENAM..'l1_b2'] = PARE (ENAM..'L1.B2', { mech_sep= MECHSEP*bv_aux })
    MADX[ENAM..'r1_b2'] = PARE (ENAM..'R1.B2', { mech_sep=-MECHSEP*bv_aux })
    MADX[ENAM..'l5_b2'] = PARE (ENAM..'L5.B2', { mech_sep= MECHSEP*bv_aux })
    MADX[ENAM..'r5_b2'] = PARE (ENAM..'R5.B2', { mech_sep=-MECHSEP*bv_aux })
end

!===============================================
! TAS
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: TAS")
end

!posTAXS  =19.950;
postaxsl1  =19.979
postaxsr1  =19.971
postaxsl5  =19.950
postaxsr5  =19.950

l_taxs  =1.8

taxs = collimator 'TAXS'   { l := l_taxs }

-- TAXS.1R1: TAXS; TAXS.1L1: TAXS;
-- TAXS.1R5: TAXS; TAXS.1L5: TAXS;
taxs_1l1 = taxs 'TAXS.1L1' {  }
taxs_1r1 = taxs 'TAXS.1R1' {  }
taxs_1l5 = taxs 'TAXS.1L5' {  }
taxs_1r5 = taxs 'TAXS.1R5' {  }

! TAS
install_ir15_cmn4('TAXS.1',posTAXSL1,posTAXSR1,posTAXSL5,posTAXSR5);

!===============================================
! Triplet region
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Triplet")
end

! Lstar {.46 |Q1|}
lstar   =23.00-0.08+0.007

posq1a=\ lstar +l_mqxfa/2.
posq1b=\ posq1a+l_mqxfa+dq1aq1b
posq2a=\ posq1b+(l_mqxfa+l_mqxfb)/2.+dq1q2a
posq2b=\ posq2a+l_mqxfb+dq2aq2b
posq3a=\ posq2b+(l_mqxfa+l_mqxfb)/2.+dq2bq3
posq3b=\ posq3a+l_mqxfa+dq1aq1b

kmax_mqxfa=132.6
kmax_mqxfb=132.6
kmin_mqxfa=132.6*0.03
kmin_mqxfb=132.6*0.03
imax_mqxfa=16470
imax_mqxfb=16470


! new element types
mqxfa = quadrupole 'MQXFA' { l := l_mqxfa,
         kmax:=  kmax_mqxfa, kmin:= kmax_mqxfa, calib=kmax_mqxfa/imax_mqxfa }
mqxfb = quadrupole 'MQXFB' { l := l_mqxfb,
         kmax:=  kmax_mqxfb, kmin:= kmax_mqxfb, calib=kmax_mqxfb/imax_mqxfb }

! triplet quad strengths in IR1   IR5

mqxfa_a1l1 = mqxfa 'MQXFA.A1L1' { k1:= kqx1_l1  *bv_aux }
mqxfa_a1r1 = mqxfa 'MQXFA.A1R1' { k1:= kqx1_r1  *bv_aux }
mqxfa_b1l1 = mqxfa 'MQXFA.B1L1' { k1:= kqx1_l1  *bv_aux }
mqxfa_b1r1 = mqxfa 'MQXFA.B1R1' { k1:= kqx1_r1  *bv_aux }
mqxfb_a2l1 = mqxfb 'MQXFB.A2L1' { k1:=-kqx2a_l1 *bv_aux }
mqxfb_b2l1 = mqxfb 'MQXFB.B2L1' { k1:=-kqx2b_l1 *bv_aux }
mqxfb_a2r1 = mqxfb 'MQXFB.A2R1' { k1:=-kqx2a_r1 *bv_aux }
mqxfb_b2r1 = mqxfb 'MQXFB.B2R1' { k1:=-kqx2b_r1 *bv_aux }
mqxfa_a3l1 = mqxfa 'MQXFA.A3L1' { k1:= kqx3_l1  *bv_aux }
mqxfa_a3r1 = mqxfa 'MQXFA.A3R1' { k1:= kqx3_r1  *bv_aux }
mqxfa_b3l1 = mqxfa 'MQXFA.B3L1' { k1:= kqx3_l1  *bv_aux }
mqxfa_b3r1 = mqxfa 'MQXFA.B3R1' { k1:= kqx3_r1  *bv_aux }

mqxfa_a1l5 = mqxfa 'MQXFA.A1L5' { k1:= kqx1_l5  *bv_aux }
mqxfa_a1r5 = mqxfa 'MQXFA.A1R5' { k1:= kqx1_r5  *bv_aux }
mqxfa_b1l5 = mqxfa 'MQXFA.B1L5' { k1:= kqx1_l5  *bv_aux }
mqxfa_b1r5 = mqxfa 'MQXFA.B1R5' { k1:= kqx1_r5  *bv_aux }
mqxfb_a2l5 = mqxfb 'MQXFB.A2L5' { k1:=-kqx2a_l5 *bv_aux }
mqxfb_b2l5 = mqxfb 'MQXFB.B2L5' { k1:=-kqx2b_l5 *bv_aux }
mqxfb_a2r5 = mqxfb 'MQXFB.A2R5' { k1:=-kqx2a_r5 *bv_aux }
mqxfb_b2r5 = mqxfb 'MQXFB.B2R5' { k1:=-kqx2b_r5 *bv_aux }
mqxfa_a3l5 = mqxfa 'MQXFA.A3L5' { k1:= kqx3_l5  *bv_aux }
mqxfa_a3r5 = mqxfa 'MQXFA.A3R5' { k1:= kqx3_r5  *bv_aux }
mqxfa_b3l5 = mqxfa 'MQXFA.B3L5' { k1:= kqx3_l5  *bv_aux }
mqxfa_b3r5 = mqxfa 'MQXFA.B3R5' { k1:= kqx3_r5  *bv_aux }

! Triplet
install_ir15_cmn('MQXFA.A1', posQ1a)
install_ir15_cmn('MQXFA.B1', posQ1b)
install_ir15_cmn('MQXFB.A2', posQ2A)
install_ir15_cmn('MQXFB.B2', posQ2B)
install_ir15_cmn('MQXFA.A3', posQ3a)
install_ir15_cmn('MQXFA.B3', posQ3b)

!===============================================
! MCBX in Q2 (small orbit corrector)
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Q2")
end

! .488 should become 478 and 479 to be checked...

! MCBX
! Q1  |.5 } 1 {.5 | MCBXFBa | .488 | Q2a
! Q2a |.5 } 1 {.5 | Q2b | .489| MCBXFBb |.5 }
! Q2b |.489 | MCBXFBb |.1 } .1 {.5 | Q3 | .5}

posmcbxfba  =\  posq2a     -(l_mqxfb + l_mcbxfb   )/2. -0.464
posmcbxfbb  =\  posq2b     +(l_mqxfb + l_mcbxfb   )/2. +0.464
!value,l.MCBXFB, posMCBXFBa,posMCBXFBb;

! Cabling orbit corrector inside Q2a and Q2b cold masses

mcbxfbh = hkicker 'MCBXFBH'     { lrad := l_mcbxfb }
mcbxfbv = vkicker 'MCBXFBV'     { lrad := l_mcbxfb }

kmax_mcbxfb =\  2.5000 / l_mcbxfb
kmin_mcbxfb =\  -kmax_mcbxfb
-- value, Kmax_MCBXFB;

mcbxfbh :setvar {   kmax:=kmax_mcbxfb, kmin:=kmin_mcbxfb }
mcbxfbv :setvar {   kmax:=kmax_mcbxfb, kmin:=kmin_mcbxfb }


mcbxfbh_a2l1 = mcbxfbh 'MCBXFBH.A2L1'  { kick := acbxh1_l1 }
mcbxfbh_a2r1 = mcbxfbh 'MCBXFBH.A2R1'  { kick := acbxh1_r1 }
mcbxfbh_a2l5 = mcbxfbh 'MCBXFBH.A2L5'  { kick := acbxh1_l5 }
mcbxfbh_a2r5 = mcbxfbh 'MCBXFBH.A2R5'  { kick := acbxh1_r5 }
mcbxfbv_a2l1 = mcbxfbv 'MCBXFBV.A2L1'  { kick := acbxv1_l1*bv_aux }
mcbxfbv_a2r1 = mcbxfbv 'MCBXFBV.A2R1'  { kick := acbxv1_r1*bv_aux }
mcbxfbv_a2l5 = mcbxfbv 'MCBXFBV.A2L5'  { kick := acbxv1_l5*bv_aux }
mcbxfbv_a2r5 = mcbxfbv 'MCBXFBV.A2R5'  { kick := acbxv1_r5*bv_aux }
mcbxfbh_b2l1 = mcbxfbh 'MCBXFBH.B2L1'  { kick := acbxh2_l1 }
mcbxfbh_b2r1 = mcbxfbh 'MCBXFBH.B2R1'  { kick := acbxh2_r1 }
mcbxfbh_b2l5 = mcbxfbh 'MCBXFBH.B2L5'  { kick := acbxh2_l5 }
mcbxfbh_b2r5 = mcbxfbh 'MCBXFBH.B2R5'  { kick := acbxh2_r5 }
mcbxfbv_b2l1 = mcbxfbv 'MCBXFBV.B2L1'  { kick := acbxv2_l1*bv_aux }
mcbxfbv_b2r1 = mcbxfbv 'MCBXFBV.B2R1'  { kick := acbxv2_r1*bv_aux }
mcbxfbv_b2l5 = mcbxfbv 'MCBXFBV.B2L5'  { kick := acbxv2_l5*bv_aux }
mcbxfbv_b2r5 = mcbxfbv 'MCBXFBV.B2R5'  { kick := acbxv2_r5*bv_aux }

! Orbit correctors
install_ir15_cmn('MCBXFBH.A2', posMCBXFBa)
install_ir15_cmn('MCBXFBV.A2', posMCBXFBa)
install_ir15_cmn('MCBXFBH.B2', posMCBXFBb)
install_ir15_cmn('MCBXFBV.B2', posMCBXFBb)

!===============================================
!Corrector package
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Corrector")
end

! layout

                         !V1.3  V1.2
l_mqsxf   = 0.402
l_mcsxf   = 0.168
l_mcssxf  = 0.168
l_mcoxf   = 0.145
l_mcosxf  = 0.145
l_mcdxf   = 0.145
l_mcdsxf  = 0.145
l_mctxf   = 0.469
l_mctsxf  = 0.099


! Q3|.5} 1.00 {.5  | MCBXFA  | .5
!              .08 | MQSXF  | .08
!              .08 | MCTXF   | .08
!              .08 | MCTSXF  | .08
!              .08 | MCDXF   | .08
!              .08 | MCDSXF  | .08
!              .08 | MCOXF   | .08
!              .08 | MCOSXF  | .08
!              .08 | MCSXF   | .08
!              .08 | MCSSXF  | .08 }

posmcbxfa  =\  posq3b     + (l_mqxfa   + l_mcbxfa )/2.+2.727
posmqsxf   =\  posmcbxfa  + 1.61
posmctxf   =\  posmqsxf   + 0.64
posmctsxf  =\  posmctxf   + 0.438
posmcdxf   =\  posmctsxf  + 0.271
posmcdsxf  =\  posmcdxf   + 0.29
posmcoxf   =\  posmcdsxf  + 0.29
posmcosxf  =\  posmcoxf   + 0.29
posmcsxf   =\  posmcosxf  + 0.299
posmcssxf  =\  posmcsxf   + 0.308

-- value,posMCBXFA,posMQSXF,posMCTXF,posMCTSXF,posMCDXF,posMCDSXF,posMCOXF,posMCOSXF,posMCSXF,posMCSSXF;

! orbit corrector elements
mcbxfah = hkicker    'MCBXFAH' { lrad := l_mcbxfa   }
mcbxfav = vkicker    'MCBXFAV' { lrad := l_mcbxfa   }
mqsxf   = quadrupole 'MQSXF'   { l    := l_mqsxf    }
mctxf   = multipole  'MCTXF'   { lrad := l_mctxf    }
mctsxf  = multipole  'MCTSXF'  { lrad := l_mctsxf   }
mcdxf   = multipole  'MCDXF'   { lrad := l_mcdxf    }
mcdsxf  = multipole  'MCDSXF'  { lrad := l_mcdsxf   }
mcoxf   = multipole  'MCOXF'   { lrad := l_mcoxf    }
mcosxf  = multipole  'MCOSXF'  { lrad := l_mcosxf   }
mcsxf   = multipole  'MCSXF'   { lrad := l_mcsxf    }
mcssxf  = multipole  'MCSSXF'  { lrad := l_mcssxf   }


kmax_mcbxfa=\  4.5000 / l_mcbxfa
rref_mpcorr = 0.05
kmax_mqsxf =\  0.7000 / l_mqsxf/rref_mpcorr
kmax_mcsxf =\  0.0950 / l_mcsxf /rref_mpcorr^2 *   2.
kmax_mcssxf=\  0.0950 / l_mcssxf/rref_mpcorr^2 *   2.
kmax_mcoxf =\  0.0690 / l_mcoxf /rref_mpcorr^3 *   6.
kmax_mcosxf=\  0.0690 / l_mcosxf/rref_mpcorr^3 *   6.
kmax_mcdxf =\  0.0370 / l_mcdxf /rref_mpcorr^4 *  24.
kmax_mcdsxf=\  0.0370 / l_mcdsxf/rref_mpcorr^4 *  24.
kmax_mctxf =\  0.0860 / l_mctxf /rref_mpcorr^5 * 120.
kmax_mctsxf=\  0.0170 / l_mctsxf/rref_mpcorr^5 * 120.


kmin_mcbxfa=\  -kmax_mcbxfa
kmin_mqsxf =\  -kmax_mqsxf
kmin_mcsxf =\  -kmax_mcsxf
kmin_mcssxf=\  -kmax_mcssxf
kmin_mcoxf =\  -kmax_mcoxf
kmin_mcosxf=\  -kmax_mcosxf
kmin_mctxf =\  -kmax_mctxf
kmin_mcdxf =\  -kmax_mcdxf
kmin_mcdsxf=\  -kmax_mcdsxf
kmin_mctsxf=\  -kmax_mctsxf

imax_mcbxfa =1584
imax_mcbxfb =1625
imax_mqsxf  = 174
imax_mcssxf =  99
imax_mcsxf  =  99
imax_mcosxf = 102
imax_mcoxf  = 102
imax_mcdsxf =  92
imax_mcdxf  =  92
imax_mctxf  =  85
imax_mctsxf =  84

! cabling
mcbxfah :setvar {  kmax:=kmax_mcbxfa, kmin:=kmin_mcbxfa }
mcbxfav :setvar {  kmax:=kmax_mcbxfa, kmin:=kmin_mcbxfa }
mcbxfah_3l1 = mcbxfah 'MCBXFAH.3L1'  { kick := acbxh3_l1 }
mcbxfah_3r1 = mcbxfah 'MCBXFAH.3R1'  { kick := acbxh3_r1 }
mcbxfah_3l5 = mcbxfah 'MCBXFAH.3L5'  { kick := acbxh3_l5 }
mcbxfah_3r5 = mcbxfah 'MCBXFAH.3R5'  { kick := acbxh3_r5 }
mcbxfav_3l1 = mcbxfav 'MCBXFAV.3L1'  { kick := acbxv3_l1*bv_aux }
mcbxfav_3r1 = mcbxfav 'MCBXFAV.3R1'  { kick := acbxv3_r1*bv_aux }
mcbxfav_3l5 = mcbxfav 'MCBXFAV.3L5'  { kick := acbxv3_l5*bv_aux }
mcbxfav_3r5 = mcbxfav 'MCBXFAV.3R5'  { kick := acbxv3_r5*bv_aux }


!A2 CORRECTOR
mqsxf :setvar {  kmax:=kmax_mqsxf , kmin:=kmin_mqsxf }
mqsxf_3l1 = mqsxf 'MQSXF.3L1'  { k1s:=kqsx3_l1 }
mqsxf_3r1 = mqsxf 'MQSXF.3R1'  { k1s:=kqsx3_r1 }
mqsxf_3l5 = mqsxf 'MQSXF.3L5'  { k1s:=kqsx3_l5 }
mqsxf_3r5 = mqsxf 'MQSXF.3R5'  { k1s:=kqsx3_r5 }


!B3 CORRECTOR
mcsxf :setvar {  kmax:=kmax_mcsxf , kmin:=kmin_mcsxf }
mcsxf_3l1 = mcsxf 'MCSXF.3L1'  { knl := {0, 0, kcsx3_l1*l_mcsxf} }
mcsxf_3r1 = mcsxf 'MCSXF.3R1'  { knl := {0, 0, kcsx3_r1*l_mcsxf} }
mcsxf_3l5 = mcsxf 'MCSXF.3L5'  { knl := {0, 0, kcsx3_l5*l_mcsxf} }
mcsxf_3r5 = mcsxf 'MCSXF.3R5'  { knl := {0, 0, kcsx3_r5*l_mcsxf} }

!B6 CORRECTOR
mctxf :setvar {  kmax:=kmax_mctxf , kmin:=kmin_mctxf }
mctxf_3l1 = mctxf 'MCTXF.3L1'  { knl := {0, 0, 0, 0, 0, kctx3_l1 *bv_aux*l_mctxf} }
mctxf_3r1 = mctxf 'MCTXF.3R1'  { knl := {0, 0, 0, 0, 0, kctx3_r1 *bv_aux*l_mctxf} }
mctxf_3l5 = mctxf 'MCTXF.3L5'  { knl := {0, 0, 0, 0, 0, kctx3_l5 *bv_aux*l_mctxf} }
mctxf_3r5 = mctxf 'MCTXF.3R5'  { knl := {0, 0, 0, 0, 0, kctx3_r5 *bv_aux*l_mctxf} }

!A6 CORRECTOR
mctsxf :setvar {  kmax:=kmax_mctsxf , kmin:=kmin_mctsxf }
mctsxf_3l1 = mctsxf 'MCTSXF.3L1'  { ksl := {0, 0, 0, 0, 0, kctsx3_l1 *l_mctsxf} }
mctsxf_3r1 = mctsxf 'MCTSXF.3R1'  { ksl := {0, 0, 0, 0, 0, kctsx3_r1 *l_mctsxf} }
mctsxf_3l5 = mctsxf 'MCTSXF.3L5'  { ksl := {0, 0, 0, 0, 0, kctsx3_l5 *l_mctsxf} }
mctsxf_3r5 = mctsxf 'MCTSXF.3R5'  { ksl := {0, 0, 0, 0, 0, kctsx3_r5 *l_mctsxf} }

!A3 CORRECTOR
mcssxf :setvar {  kmax:=kmax_mcssxf, kmin:=kmin_mcssxf }
mcssxf_3l1 = mcssxf 'MCSSXF.3L1'  { ksl := {0, 0, kcssx3_l1 *bv_aux*l_mcssxf} }
mcssxf_3r1 = mcssxf 'MCSSXF.3R1'  { ksl := {0, 0, kcssx3_r1 *bv_aux*l_mcssxf} }
mcssxf_3l5 = mcssxf 'MCSSXF.3L5'  { ksl := {0, 0, kcssx3_l5 *bv_aux*l_mcssxf} }
mcssxf_3r5 = mcssxf 'MCSSXF.3R5'  { ksl := {0, 0, kcssx3_r5 *bv_aux*l_mcssxf} }

!A4 CORRECTOR
mcosxf :setvar {  kmax:=kmax_mcosxf, kmin:=kmin_mcosxf }
mcosxf_3l1 = mcosxf 'MCOSXF.3L1'  { ksl := {0, 0, 0, kcosx3_l1*l_mcosxf} }
mcosxf_3r1 = mcosxf 'MCOSXF.3R1'  { ksl := {0, 0, 0, kcosx3_r1*l_mcosxf} }
mcosxf_3l5 = mcosxf 'MCOSXF.3L5'  { ksl := {0, 0, 0, kcosx3_l5*l_mcosxf} }
mcosxf_3r5 = mcosxf 'MCOSXF.3R5'  { ksl := {0, 0, 0, kcosx3_r5*l_mcosxf} }

!B4 CORRECTOR
mcoxf :setvar {  kmax:=kmax_mcoxf , kmin:=kmin_mcoxf }
mcoxf_3l1 = mcoxf 'MCOXF.3L1'  { knl := {0, 0, 0, kcox3_l1 *bv_aux*l_mcoxf} }
mcoxf_3r1 = mcoxf 'MCOXF.3R1'  { knl := {0, 0, 0, kcox3_r1 *bv_aux*l_mcoxf} }
mcoxf_3l5 = mcoxf 'MCOXF.3L5'  { knl := {0, 0, 0, kcox3_l5 *bv_aux*l_mcoxf} }
mcoxf_3r5 = mcoxf 'MCOXF.3R5'  { knl := {0, 0, 0, kcox3_r5 *bv_aux*l_mcoxf} }

!A5 CORRECTOR
mcdsxf :setvar {  kmax:=kmax_mcdsxf, kmin:=kmin_mcdsxf }
mcdsxf_3l1 = mcdsxf 'MCDSXF.3L1'  { ksl := {0, 0, 0, 0, kcdsx3_l1 *bv_aux*l_mcdsxf} }
mcdsxf_3r1 = mcdsxf 'MCDSXF.3R1'  { ksl := {0, 0, 0, 0, kcdsx3_r1 *bv_aux*l_mcdsxf} }
mcdsxf_3l5 = mcdsxf 'MCDSXF.3L5'  { ksl := {0, 0, 0, 0, kcdsx3_l5 *bv_aux*l_mcdsxf} }
mcdsxf_3r5 = mcdsxf 'MCDSXF.3R5'  { ksl := {0, 0, 0, 0, kcdsx3_r5 *bv_aux*l_mcdsxf} }

!B5 CORRECTOR
mcdxf :setvar {  kmax:=kmax_mcdxf , kmin:=kmin_mcdxf }
mcdxf_3l1 = mcdxf 'MCDXF.3L1'  { knl := {0, 0, 0, 0, kcdx3_l1*l_mcdxf} }
mcdxf_3r1 = mcdxf 'MCDXF.3R1'  { knl := {0, 0, 0, 0, kcdx3_r1*l_mcdxf} }
mcdxf_3l5 = mcdxf 'MCDXF.3L5'  { knl := {0, 0, 0, 0, kcdx3_l5*l_mcdxf} }
mcdxf_3r5 = mcdxf 'MCDXF.3R5'  { knl := {0, 0, 0, 0, kcdx3_r5*l_mcdxf} }

! Installl non linear correctors
install_ir15_cmn('MCBXFAH.3',posMCBXFA ) !b1
install_ir15_cmn('MCBXFAV.3',posMCBXFA ) !a1
install_ir15_cmn('MQSXF.3'  ,posMQSXF  ) !a2
install_ir15_cmn('MCTXF.3'  ,posMCTXF  ) !b6
install_ir15_cmn('MCTSXF.3' ,posMCTSXF ) !a6
install_ir15_cmn('MCDXF.3'  ,posMCDXF  ) !b5
install_ir15_cmn('MCDSXF.3' ,posMCDSXF ) !a5
install_ir15_cmn('MCOXF.3'  ,posMCOXF  ) !b4
install_ir15_cmn('MCOSXF.3' ,posMCOSXF ) !a4
install_ir15_cmn('MCSXF.3'  ,posMCSXF  ) !b3
install_ir15_cmn('MCSSXF.3' ,posMCSSXF ) !a3

!===============================================
! D1 area
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: D1 area")
end

! MCSSXF | .5} .1 {.5 D1 .5} 1 DFXJ

! separation recombination dipoles
!l.MBXF= 6.69;
!l.MBXF= 6.36;
!l.MBXF= 6.27;
mbxf = rbend 'MBXF'    { l := l_mbxf  }
mbxf_4l1 = mbxf 'MBXF.4L1' { angle:= ad1_lr1, k0 := kd1_lr1, polarity=+1 *bv_aux }
mbxf_4r1 = mbxf 'MBXF.4R1' { angle:=-ad1_lr1, k0 :=-kd1_lr1, polarity=-1 *bv_aux }
mbxf_4l5 = mbxf 'MBXF.4L5' { angle:= ad1_lr5, k0 := kd1_lr5, polarity=+1 *bv_aux }
mbxf_4r5 = mbxf 'MBXF.4R5' { angle:=-ad1_lr5, k0 :=-kd1_lr5, polarity=-1 *bv_aux }
posd1 = posq3b+(l_mqxfa+l_mbxf)/2+9.81
! MBXF cryostat ends ay 82.700
! MBXF cold madd ends at 81.467

! service module for current distribution in the non-IP side of D1
l_dfxj = 3.525
dfxj = placeholder 'DFXJ'  { lrad:= l_dfxj }
posdfxj =\  93.018-l_dfxj/2
-- DFXJ.4L1: DFXJ; DFXJ.4R1: DFXJ; DFXJ.4L5: DFXJ; DFXJ.4R5: DFXJ;
dfxj_4l1 = dfxj 'DFXJ.4L1' {  }
dfxj_4r1 = dfxj 'DFXJ.4R1' {  }
dfxj_4l5 = dfxj 'DFXJ.4L5' {  }
dfxj_4r5 = dfxj 'DFXJ.4R5' {  }


posvmbxf = 81.826
posvmbxfa= 81.836
posvmbxfb= 82.386

-- VMBXF.4L1 : marker; VMBXF.4R1 : marker; VMBXF.4L5 : marker; VMBXF.4R5 : marker;
-- VMBXFA.4L1: marker; VMBXFA.4R1: marker; VMBXFA.4L5: marker; VMBXFA.4R5: marker;
-- VMBXFB.4L1: marker; VMBXFB.4R1: marker; VMBXFB.4L5: marker; VMBXFB.4R5: marker;

vmbxf_4l1 = marker 'VMBXF.4L1' {  }
vmbxf_4r1 = marker 'VMBXF.4R1' {  }
vmbxf_4l5 = marker 'VMBXF.4L5' {  }
vmbxf_4r5 = marker 'VMBXF.4R5' {  }
vmbxfa_4l1 = marker 'VMBXFA.4L1' {  }
vmbxfa_4r1 = marker 'VMBXFA.4R1' {  }
vmbxfa_4l5 = marker 'VMBXFA.4L5' {  }
vmbxfa_4r5 = marker 'VMBXFA.4R5' {  }
vmbxfb_4l1 = marker 'VMBXFB.4L1' {  }
vmbxfb_4r1 = marker 'VMBXFB.4R1' {  }
vmbxfb_4l5 = marker 'VMBXFB.4L5' {  }
vmbxfb_4r5 = marker 'VMBXFB.4R5' {  }

! D1
install_ir15_cmn('MBXF.4',   posD1    )
install_ir15_cmn('DFXJ.4',   posDFXJ  )
install_ir15_cmn('VMBXF.4',  posVMBXF )
install_ir15_cmn('VMBXFA.4', posVMBXFA)
install_ir15_cmn('VMBXFB.4', posVMBXFB)

!===============================================
!BPM triplet D1
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: BPM triplet D1")
end

! to be changed
!           Q1  | .5 } .526  BPM .172 {.5 | MCBXFBa
! MCBXFBa | Q2a | .5 } .054  BPM .812 {.5 | Q2b
!       MCBXFBb | .0}  .392  BPM .805 {.5 | Q3
!           Q3  | .5 } .047  BPM ...

! BMPSQW is between TAS and Q1
l_bpmqstza  = 0.2
l_bpmqstzb  = 0.2
l_bpmqstzw = 0.285
bpmqstza = monitor 'BPMQSTZA'     { lrad := l_bpmqstza }
bpmqstzb = monitor 'BPMQSTZB'     { lrad := l_bpmqstzb }
bpmqstzw = monitor 'BPMQSTZW'     { lrad := l_bpmqstzw }

posbpm1 =\  posq1a - l_mqxfa/2 - 1.074 + 0.018
posbpm2 =\  posq1b + l_mqxfa/2 + 1.154 + 0.035
posbpm3 =\  posq2a + l_mqxfb/2 + 1.156 + 0.035
posbpm4 =\  posq3a - l_mqxfa/2 - 0.954 + 0.036
posbpm5 =\  posq3b + l_mqxfa/2 + 1.154 + 0.027
posbpm6 =\  posd1  - l_mbxf/2  - 0.702 + 0.026
posbpm7 =\  posd1  + l_mbxf/2  + 2.985
! posBPM7 83.7265, best location 84.150

-- value, posBPM1,posBPM2,posBPM3,posBPM4,posBPM5,posBPM6,posBPM7;

! xpos=array([21.853,33.073,43.858,54.643,65.743,87.89])
! c_[abs(a),abs(a-1)].min(axis=1)*3.74
! array([ 0.587,  0.587,  1.022,  1.457,  1.577,  1.87 ])

nosep = 0

newel_ir15_b12('BPMQSTZA.1' ,bpmqstza,noSEP)
newel_ir15_b12('BPMQSTZB.A2',bpmqstzb,noSEP)
newel_ir15_b12('BPMQSTZB.B2',bpmqstzb,noSEP)
newel_ir15_b12('BPMQSTZB.A3',bpmqstzb,noSEP)
newel_ir15_b12('BPMQSTZB.B3',bpmqstzb,noSEP)
newel_ir15_b12('BPMQSTZB.4' ,bpmqstzb,noSEP)
newel_ir15_b12('BPMQSTZW.4' ,bpmqstzw,noSEP)

! BPMS
install_ir15_b12('BPMQSTZA.1' ,  posBPM1)
install_ir15_b12('BPMQSTZB.A2',  posBPM2)
install_ir15_b12('BPMQSTZB.B2',  posBPM3)
install_ir15_b12('BPMQSTZB.A3',  posBPM4)
install_ir15_b12('BPMQSTZB.B3',  posBPM5)
install_ir15_b12('BPMQSTZB.4' ,  posBPM6)
install_ir15_b12('BPMQSTZW.4' ,  posBPM7)

!===============================================
! D2 area
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: D2 area")
end

! D2
!l.MBRD=10;
!if (l.MBRD==0) {l.MBRD=7.8;};
!if (l.MCBRD==0) {l.MCBRD=1.5;};
l_bpmqbcza=0.285
l_bpmqbczb=0.285
mbrd = rbend 'MBRD'    { l := l_mbrd  }
mcbrdh = hkicker 'MCBRDH'    { l := l_mcbrd }
mcbrdv = vkicker 'MCBRDV'    { l := l_mcbrd }
bpmqbcza = monitor 'BPMQBCZA'    { lrad := l_bpmqbcza }
bpmqbczb = monitor 'BPMQBCZB'    { lrad := l_bpmqbczb }
vmbrda = marker 'VMBRDA'    { l=0 }
vmbrdb = marker 'VMBRDB'    { l=0 }

posd2  =\  157.9+deltaposd2
!posD2  = 157.9-8-7;     ! from V6.503
! 8 to fit two cavitities with 1.5 meter at 163
!11 to fit three cavitities with 1.5 meter

posmcbrda  =\  posd2 + l_mbrd/2 + l_mcbrd/2 + 0.357 + deltaposmcbrd
posmcbrdb  =\  posmcbrda + l_mcbrd          + 0.294

posvmbrda  =\   posd2 -4.755 + 0.200
posvmbrdb  =\   posd2 +  10.288 - 0.667
sepvmbrda  =\  0.188
sepvmbrdb  =\  0.188
posbpmqbcza  =\  posd2 + 9.723
posbpmqbczb  =\  posd2 + 9.783
sepbpmwq  =\  0.194

vmbrd = marker 'VMBRD' {  }

mbrd_4l1_b1 = mbrd 'MBRD.4L1.B1'  { angle:=-ad2_l1, k0:=-kd2_l1, polarity=-1, mech_sep=-0.1880 }
mbrd_4r1_b1 = mbrd 'MBRD.4R1.B1'  { angle:= ad2_r1, k0:= kd2_r1, polarity=+1, mech_sep= 0.1880 }
mbrd_4l5_b1 = mbrd 'MBRD.4L5.B1'  { angle:=-ad2_l5, k0:=-kd2_l5, polarity=-1, mech_sep=-0.1880 }
mbrd_4r5_b1 = mbrd 'MBRD.4R5.B1'  { angle:= ad2_r5, k0:= kd2_r5, polarity=+1, mech_sep= 0.1880 }

mbrd_4l1_b2 = mbrd 'MBRD.4L1.B2'  { angle:=-ad2_l1, k0:=-kd2_l1, polarity=+1*bv_aux, mech_sep= 0.1880*bv_aux }
mbrd_4r1_b2 = mbrd 'MBRD.4R1.B2'  { angle:= ad2_r1, k0:= kd2_r1, polarity=-1*bv_aux, mech_sep=-0.1880*bv_aux }
mbrd_4l5_b2 = mbrd 'MBRD.4L5.B2'  { angle:=-ad2_l5, k0:=-kd2_l5, polarity=+1*bv_aux, mech_sep= 0.1880*bv_aux }
mbrd_4r5_b2 = mbrd 'MBRD.4R5.B2'  { angle:= ad2_r5, k0:= kd2_r5, polarity=-1*bv_aux, mech_sep=-0.1880*bv_aux }

mcbrdh_4l1_b1 = mcbrdh 'MCBRDH.4L1.B1'  { kick:= acbrdh4_l1b1, mech_sep=-0.1880 }
mcbrdh_4r1_b1 = mcbrdh 'MCBRDH.4R1.B1'  { kick:= acbrdh4_r1b1, mech_sep= 0.1880 }
mcbrdh_4l5_b1 = mcbrdh 'MCBRDH.4L5.B1'  { kick:= acbrdh4_l5b1, mech_sep=-0.1880 }
mcbrdh_4r5_b1 = mcbrdh 'MCBRDH.4R5.B1'  { kick:= acbrdh4_r5b1, mech_sep= 0.1880 }
mcbrdh_4l1_b2 = mcbrdh 'MCBRDH.4L1.B2'  { kick:=-acbrdh4_l1b2, mech_sep= 0.1880*bv_aux }
mcbrdh_4r1_b2 = mcbrdh 'MCBRDH.4R1.B2'  { kick:=-acbrdh4_r1b2, mech_sep=-0.1880*bv_aux }
mcbrdh_4l5_b2 = mcbrdh 'MCBRDH.4L5.B2'  { kick:=-acbrdh4_l5b2, mech_sep= 0.1880*bv_aux }
mcbrdh_4r5_b2 = mcbrdh 'MCBRDH.4R5.B2'  { kick:=-acbrdh4_r5b2, mech_sep=-0.1880*bv_aux }
mcbrdv_4l1_b1 = mcbrdv 'MCBRDV.4L1.B1'  { kick:= acbrdv4_l1b1*bv_aux, mech_sep=-0.1880 }
mcbrdv_4r1_b1 = mcbrdv 'MCBRDV.4R1.B1'  { kick:= acbrdv4_r1b1*bv_aux, mech_sep= 0.1880 }
mcbrdv_4l5_b1 = mcbrdv 'MCBRDV.4L5.B1'  { kick:= acbrdv4_l5b1*bv_aux, mech_sep=-0.1880 }
mcbrdv_4r5_b1 = mcbrdv 'MCBRDV.4R5.B1'  { kick:= acbrdv4_r5b1*bv_aux, mech_sep= 0.1880 }
mcbrdv_4l1_b2 = mcbrdv 'MCBRDV.4L1.B2'  { kick:=-acbrdv4_l1b2*bv_aux, mech_sep= 0.1880*bv_aux }
mcbrdv_4r1_b2 = mcbrdv 'MCBRDV.4R1.B2'  { kick:=-acbrdv4_r1b2*bv_aux, mech_sep=-0.1880*bv_aux }
mcbrdv_4l5_b2 = mcbrdv 'MCBRDV.4L5.B2'  { kick:=-acbrdv4_l5b2*bv_aux, mech_sep= 0.1880*bv_aux }
mcbrdv_4r5_b2 = mcbrdv 'MCBRDV.4R5.B2'  { kick:=-acbrdv4_r5b2*bv_aux, mech_sep=-0.1880*bv_aux }

newel_ir15_b12('VMBRDA.4',vmbrd,sepVMBRDA);
newel_ir15_b12('VMBRDB.4',vmbrd,sepVMBRDB);

bpmqbcza_4l1_b1 = bpmqbcza 'BPMQBCZA.4L1.B1'  { mech_sep=-sepbpmwq }
bpmqbczb_4l1_b2 = bpmqbczb 'BPMQBCZB.4L1.B2'  { mech_sep= sepbpmwq*bv_aux }
bpmqbczb_4r1_b1 = bpmqbczb 'BPMQBCZB.4R1.B1'  { mech_sep= sepbpmwq }
bpmqbcza_4r1_b2 = bpmqbcza 'BPMQBCZA.4R1.B2'  { mech_sep=-sepbpmwq*bv_aux }
bpmqbcza_4l5_b1 = bpmqbcza 'BPMQBCZA.4L5.B1'  { mech_sep=-sepbpmwq }
bpmqbczb_4l5_b2 = bpmqbczb 'BPMQBCZB.4L5.B2'  { mech_sep= sepbpmwq*bv_aux }
bpmqbczb_4r5_b1 = bpmqbczb 'BPMQBCZB.4R5.B1'  { mech_sep= sepbpmwq }
bpmqbcza_4r5_b2 = bpmqbcza 'BPMQBCZA.4R5.B2'  { mech_sep=-sepbpmwq*bv_aux }


! separation recombination powering, 0.194 m separation between apertures
ad1_lr1=\ atan(0.194/2./(posd2-posd1))*(1-r0)
kd1_lr1=\ ad1_lr1/l_mbxf
ad1_lr5=\ atan(0.194/2./(posd2-posd1))*(1-r0)
kd1_lr5=\ ad1_lr5/l_mbxf
ad2_l1 =\ atan(0.194/2./(posd2-posd1))*(1-r0)
ad2_r1 =\ atan(0.194/2./(posd2-posd1))*(1-r0)
kd2_l1 =\ ad2_l1/l_mbrd
kd2_r1 =\ ad2_r1/l_mbrd
ad2_l5 =\ atan(0.194/2./(posd2-posd1))*(1-r0)
ad2_r5 =\ atan(0.194/2./(posd2-posd1))*(1-r0)
kd2_l5 =\ ad2_l5/l_mbrd
kd2_r5 =\ ad2_r5/l_mbrd

-- value, posD1,posD2,posD2-posD1,posMCBRDA,posMCBRDB;
-- value, posBPMWQ,sepBPMWQ;
-- value, ad1.lr1,l.MBXF,ad1.lr1/l.MBXF*brho,ad1.lr1*brho;
-- value, ad2.l1,l.MBRD,ad2.l1/l.MBRD*brho,ad2.l1*brho;

!===============================================
! D2
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: D2")
end

install_ir15_b12('MBRD.4', posD2)
install_ir15_b1_b2_alt2('BPMQBCZA.4','BPMQBCZB.4',posBPMQBCZA,posBPMQBCZB)

! email arnaud 8/3/2019,
! B2  =V||H=    =V||H= B1 (ext)
! B1  =H||V=    =H||V= B2 (int)
! MCB.A(L) MCB.A(R) MCB.A(L) MCB.A(R)
! herve 18/2/2019
! MCB.A(R) = MCB.H ext + MCB.V int
! MCB.B(R) = MCB.V ext + MCB.H int
! MCB.A(L) = MCB.V ext + MCB.H int
! MCB.B(L) = MCB.H ext + MCB.V int

if cut_mcbrd == 0 then
  !IP - D2 posMCBRDA posMCBRDB
  ! orientation:
  ! b1: h v - IP - v h
  ! b2: v h - IP - h v
  install_ir15_b1_b2_alt('MCBRDV.4',posMCBRDA,posMCBRDB)
  install_ir15_b1_b2_alt('MCBRDH.4',posMCBRDB,posMCBRDA)
  ! orientation:
  ! b1: h v - IP - h v
  ! b2: v h - IP - v h
  !install_ir15_b1_b2_alt('MCBRDV.4',posMCBRDA,posMCBRDB)
  !install_ir15_b1_b2_alt('MCBRDH.4',posMCBRDB,posMCBRDA)
end

!===============================================
! Q4
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Q4")
end

--l.MQYY =3.4+0.1;
--l.MQYY =3.5 3.675
--if (l.MQYY==0) { l.MQYY=3.826; };
--if (l.MCBYY==0 ) {l.MCBYY=1.50;};


posq4       =\ 169.553+deltaposq4

posbpmya_4 =\ posq4 + l_mqy/2 + 0.974
dposmcby_b4 =\  ((l_mqy + l_mcbyv)/2 + 0.372)
dposmcby_4  =\  dposmcby_b4 + (l_mcbyh + l_mcbyv)/2 + 0.396
dposmcby_a4 =\  dposmcby_4  + (l_mcbyv + l_mcbyh)/2 + 0.396

-- value,posq4-dposMCBY.B4,posq4-dposMCBY.4,posq4-dposMCBY.A4;

mcbyh_4l1_b1 = mcbyh 'MCBYH.4L1.B1'  { kick:=  acbyhs4_l1b1, polarity=+1,mech_sep=-0.194 }
mcbyh_4l5_b1 = mcbyh 'MCBYH.4L5.B1'  { kick:=  acbyhs4_l5b1, polarity=+1,mech_sep=-0.194 }
mcbyh_a4r1_b1 = mcbyh 'MCBYH.A4R1.B1'  { kick:=  acbyhs4_r1b1, polarity=+1,mech_sep= 0.194 }
mcbyh_a4r5_b1 = mcbyh 'MCBYH.A4R5.B1'  { kick:=  acbyhs4_r5b1, polarity=+1,mech_sep= 0.194 }
mcbyh_b4r1_b1 = mcbyh 'MCBYH.B4R1.B1'  { kick:=  acbyh4_r1b1, polarity=+1,mech_sep= 0.194 }
mcbyh_b4r5_b1 = mcbyh 'MCBYH.B4R5.B1'  { kick:=  acbyh4_r5b1, polarity=+1,mech_sep= 0.194 }

mcbyv_4r1_b1 = mcbyv 'MCBYV.4R1.B1'  { kick:=  acbyvs4_r1b1, polarity=+1,mech_sep= 0.194 }
mcbyv_4r5_b1 = mcbyv 'MCBYV.4R5.B1'  { kick:=  acbyvs4_r5b1, polarity=+1,mech_sep= 0.194 }
mcbyv_a4l1_b1 = mcbyv 'MCBYV.A4L1.B1'  { kick:=  acbyvs4_l1b1, polarity=+1,mech_sep=-0.194 }
mcbyv_a4l5_b1 = mcbyv 'MCBYV.A4L5.B1'  { kick:=  acbyvs4_l5b1, polarity=+1,mech_sep=-0.194 }
mcbyv_b4l1_b1 = mcbyv 'MCBYV.B4L1.B1'  { kick:=  acbyv4_l1b1, polarity=+1,mech_sep=-0.194 }
mcbyv_b4l5_b1 = mcbyv 'MCBYV.B4L5.B1'  { kick:=  acbyv4_l5b1, polarity=+1,mech_sep=-0.194 }

mcbyh_4r1_b2 = mcbyh 'MCBYH.4R1.B2'  { kick:= -acbyhs4_r1b2, polarity=+1, mech_sep=-0.194*bv_aux }
mcbyh_4r5_b2 = mcbyh 'MCBYH.4R5.B2'  { kick:= -acbyhs4_r5b2, polarity=+1, mech_sep=-0.194*bv_aux }
mcbyh_a4l1_b2 = mcbyh 'MCBYH.A4L1.B2'  { kick:= -acbyhs4_l1b2, polarity=+1, mech_sep= 0.194*bv_aux }
mcbyh_a4l5_b2 = mcbyh 'MCBYH.A4L5.B2'  { kick:= -acbyhs4_l5b2, polarity=+1, mech_sep= 0.194*bv_aux }
mcbyh_b4l1_b2 = mcbyh 'MCBYH.B4L1.B2'  { kick:= -acbyh4_l1b2, polarity=+1, mech_sep= 0.194*bv_aux }
mcbyh_b4l5_b2 = mcbyh 'MCBYH.B4L5.B2'  { kick:= -acbyh4_l5b2, polarity=+1, mech_sep= 0.194*bv_aux }

mcbyv_4l1_b2 = mcbyv 'MCBYV.4L1.B2'  { kick:= -acbyvs4_l1b2*bv_aux, polarity=+1, mech_sep= 0.194*bv_aux }
mcbyv_4l5_b2 = mcbyv 'MCBYV.4L5.B2'  { kick:= -acbyvs4_l5b2*bv_aux, polarity=+1, mech_sep= 0.194*bv_aux }
mcbyv_a4r1_b2 = mcbyv 'MCBYV.A4R1.B2'  { kick:= -acbyvs4_r1b2*bv_aux, polarity=+1, mech_sep=-0.194*bv_aux }
mcbyv_a4r5_b2 = mcbyv 'MCBYV.A4R5.B2'  { kick:= -acbyvs4_r5b2*bv_aux, polarity=+1, mech_sep=-0.194*bv_aux }
mcbyv_b4r1_b2 = mcbyv 'MCBYV.B4R1.B2'  { kick:= -acbyv4_r1b2*bv_aux, polarity=+1, mech_sep=-0.194*bv_aux }
mcbyv_b4r5_b2 = mcbyv 'MCBYV.B4R5.B2'  { kick:= -acbyv4_r5b2*bv_aux, polarity=+1, mech_sep=-0.194*bv_aux }

arcsep=0.194
newel_ir15_b12('BPMYA.4',bpmya,arcSEP)

install_ir15_b12('BPMYA.4', posBPMYA_4)
install_ir15_b12('MQY.4'  , posQ4)

! alternative orientation
if bv_aux == 1 then
  lhcb1:install {
! .... MCBY.B4
    MADX['MCBYV.B4L1.B1'] :setvar {at=-(posq4-dposmcby_b4), from='IP1.L1'},
    MADX['MCBYH.B4R1.B1'] :setvar {at= (posq4-dposmcby_b4), from='IP1'   },
    MADX['MCBYV.B4L5.B1'] :setvar {at=-(posq4-dposmcby_b4), from='IP5'   },
    MADX['MCBYH.B4R5.B1'] :setvar {at= (posq4-dposmcby_b4), from='IP5'   },
! .... MCBY.4
    MADX['MCBYH.4L1.B1'] :setvar {at=-(posq4-dposmcby_4), from='IP1.L1'},
    MADX['MCBYV.4R1.B1'] :setvar {at= (posq4-dposmcby_4), from='IP1'   },
    MADX['MCBYH.4L5.B1'] :setvar {at=-(posq4-dposmcby_4), from='IP5'   },
    MADX['MCBYV.4R5.B1'] :setvar {at= (posq4-dposmcby_4), from='IP5'   },
! .... MCBY.A4
    MADX['MCBYV.A4L1.B1'] :setvar {at=-(posq4-dposmcby_a4), from='IP1.L1'},
    MADX['MCBYH.A4R1.B1'] :setvar {at= (posq4-dposmcby_a4), from='IP1'   },
    MADX['MCBYV.A4L5.B1'] :setvar {at=-(posq4-dposmcby_a4), from='IP5'   },
    MADX['MCBYH.A4R5.B1'] :setvar {at= (posq4-dposmcby_a4), from='IP5'   },
   }
end
lhcb2:install {
! .... MCBY.B4
  MADX['MCBYH.B4L1.B2'] :setvar {at=-(posq4-dposmcby_b4)*bv_aux, from='IP1.L1'},
  MADX['MCBYV.B4R1.B2'] :setvar {at= (posq4-dposmcby_b4)*bv_aux, from='IP1'   },
  MADX['MCBYH.B4L5.B2'] :setvar {at=-(posq4-dposmcby_b4)*bv_aux, from='IP5'   },
  MADX['MCBYV.B4R5.B2'] :setvar {at= (posq4-dposmcby_b4)*bv_aux, from='IP5'   },
! .... MCBY.4
  MADX['MCBYV.4L1.B2'] :setvar {at=-(posq4-dposmcby_4)*bv_aux, from='IP1.L1'},
  MADX['MCBYH.4R1.B2'] :setvar {at= (posq4-dposmcby_4)*bv_aux, from='IP1'   },
  MADX['MCBYV.4L5.B2'] :setvar {at=-(posq4-dposmcby_4)*bv_aux, from='IP5'   },
  MADX['MCBYH.4R5.B2'] :setvar {at= (posq4-dposmcby_4)*bv_aux, from='IP5'   },
! .... MCBY.A4
  MADX['MCBYH.A4L1.B2'] :setvar {at=-(posq4-dposmcby_a4)*bv_aux, from='IP1.L1'},
  MADX['MCBYV.A4R1.B2'] :setvar {at= (posq4-dposmcby_a4)*bv_aux, from='IP1'   },
  MADX['MCBYH.A4L5.B2'] :setvar {at=-(posq4-dposmcby_a4)*bv_aux, from='IP5'   },
  MADX['MCBYV.A4R5.B2'] :setvar {at= (posq4-dposmcby_a4)*bv_aux, from='IP5'   },
}

!===============================================
! Q5
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Q5")
end

-- if (l.MQYL==0){l.MQYL=3.40;};

!MQYL:  QUADRUPOLE, L := l.MQYL   ; ! long MQY type

l_bpmqb= 0.0
bpmqb = monitor 'BPMQB'     { l := l_bpmqb   }

mqy_5l1_b1 = mqy 'MQY.5L1.B1' { k1 :=  kq5_l1b1,        polarity=-1, mech_sep=-0.194        }
mqy_5l5_b1 = mqy 'MQY.5L5.B1' { k1 :=  kq5_l5b1,        polarity=-1, mech_sep=-0.194        }
mqy_5r1_b1 = mqy 'MQY.5R1.B1' { k1 :=  kq5_r1b1,        polarity=+1, mech_sep= 0.194        }
mqy_5r5_b1 = mqy 'MQY.5R5.B1' { k1 :=  kq5_r5b1,        polarity=+1, mech_sep= 0.194        }
mqy_5l1_b2 = mqy 'MQY.5L1.B2' { k1 := -kq5_l1b2*bv_aux, polarity=+1, mech_sep= 0.194*bv_aux }
mqy_5l5_b2 = mqy 'MQY.5L5.B2' { k1 := -kq5_l5b2*bv_aux, polarity=+1, mech_sep= 0.194*bv_aux }
mqy_5r1_b2 = mqy 'MQY.5R1.B2' { k1 := -kq5_r1b2*bv_aux, polarity=-1, mech_sep=-0.194*bv_aux }
mqy_5r5_b2 = mqy 'MQY.5R5.B2' { k1 := -kq5_r5b2*bv_aux, polarity=-1, mech_sep=-0.194*bv_aux }

!MCBYH.5R1.B1: MCBYH, KICK :=  acbch5.r1b1, polarity=+1;
!MCBYV.5L5.B1: MCBYV, KICK :=  acbcv5.l5b1*bv_aux, polarity=+1;
!MCBYH.5R5.B1: MCBYH, KICK :=  acbch5.r5b1, polarity=+1;
!MCBYV.5L1.B1: MCBYV, KICK :=  acbcv5.l1b1*bv_aux, polarity=+1;
!MCBYV.5R1.B2: MCBYV, KICK := -acbcv5.r1b2*bv_aux, polarity=+1;
!MCBYH.5L5.B2: MCBYH, KICK := -acbch5.l5b2, polarity=+1;
!MCBYV.5R5.B2: MCBYV, KICK := -acbcv5.r5b2*bv_aux, polarity=+1;
!MCBYH.5L1.B2: MCBYH, KICK := -acbch5.l1b2, polarity=+1;

! MQY B - A for all MQY the B corrector is closest to the MQY
!MCBYV.A5R1.B2:MCBYV, KICK:= acbyvs5.r1b2*bv_aux, polarity=+1;
!MCBYH.5R1.B2 :MCBYH, KICK:= acbyhs5.r1b2, polarity=+1;
!MCBYV.B5R1.B2:MCBYV, KICK:= acbyv5.r1b2*bv_aux, polarity=+1;
!MCBYH.B5L5.B2:MCBYH, KICK:= acbyh5.l5b2, polarity=+1;
!MCBYV.5L5.B2 :MCBYV, KICK:= acbyvs5.l5b2*bv_aux, polarity=+1;
!MCBYH.A5L5.B2:MCBYH, KICK:= acbyhs5.l5b2, polarity=+1;
!MCBYV.A5R5.B2:MCBYV, KICK:= acbyvs5.r5b2*bv_aux, polarity=+1;
!MCBYH.5R5.B2 :MCBYH, KICK:= acbyhs5.r5b2, polarity=+1;
!MCBYV.B5R5.B2:MCBYV, KICK:= acbyv5.r5b2*bv_aux, polarity=+1;
!MCBYH.B5L1.B2:MCBYH, KICK:= acbyh5.l1b2, polarity=+1;
!MCBYV.5L1.B2 :MCBYV, KICK:= acbyvs5.l1b2*bv_aux, polarity=+1;
!MCBYH.A5L1.B2:MCBYH, KICK:= acbyhs5.l1b2, polarity=+1;
!
!MCBYH.A5R1.B1:MCBYH, KICK:= -acbyhs5.r1b1, polarity=+1;
!MCBYV.5R1.B1 :MCBYV, KICK:= -acbyvs5.r1b1*bv_aux, polarity=+1;
!MCBYH.B5R1.B1:MCBYH, KICK:= -acbyh5.r1b1, polarity=+1;
!MCBYV.B5L5.B1:MCBYV, KICK:= -acbyv5.l5b1*bv_aux, polarity=+1;
!MCBYH.5L5.B1 :MCBYH, KICK:= -acbyhs5.l5b1, polarity=+1;
!MCBYV.A5L5.B1:MCBYV, KICK:= -acbyvs5.l5b1*bv_aux, polarity=+1;
!MCBYH.A5R5.B1:MCBYH, KICK:= -acbyhs5.r5b1, polarity=+1;
!MCBYV.5R5.B1 :MCBYV, KICK:= -acbyvs5.r5b1*bv_aux, polarity=+1;
!MCBYH.B5R5.B1:MCBYH, KICK:= -acbyh5.r5b1, polarity=+1;
!MCBYV.B5L1.B1:MCBYV, KICK:= -acbyv5.l1b1*bv_aux, polarity=+1;
!MCBYH.5L1.B1 :MCBYH, KICK:= -acbyhs5.l1b1, polarity=+1;
!MCBYV.A5L1.B1:MCBYV, KICK:= -acbyvs5.l1b1*bv_aux, polarity=+1;


posq5  =\  196.490 + deltaposq5

!position set for IR5 right
!dposBPMY.5  := l.MQY/2 + 0.974; !BPMYA.4L5.B1:BPMYA BPMYA.4L5.B2:BPMYA
!dposMCBY.B5 := (l.MQY + l.MCBYV)/2 + 0.372; !same as nominal note that in IR2-8-6 distance can
!dposMCBY.5  := dposMCBY.B5 + (l.MCBYH + l.MCBYV)/2 + 0.396; !be better
!dposMCBY.A5 := dposMCBY.5  + (l.MCBYV + l.MCBYH)/2 + 0.396;
!
!BPMYA.5R1.B1:BPMYA;
!BPMYA.5L5.B1:BPMYA;
!BPMYA.5R5.B1:BPMYA;
!BPMYA.5L1.B1:BPMYA;
!BPMYA.5R1.B2:BPMYA;
!BPMYA.5L5.B2:BPMYA;
!BPMYA.5R5.B2:BPMYA;
!BPMYA.5L1.B2:BPMYA;


!exec,newel_ir15_b12(BPMQB.5,BPMQB);
!exec,newel_ir15_b12(BPMYA.5,BPMYA);

install_ir15_b12('MQML.5', posQ5)

dposmcbc =\  ((l_mqml + l_mcbch)/2 + 0.192)
dposbpm   =\  l_mqml/2 + 0.745

-- value,posQ5-dposBPM,posQ5+dposBPM;
-- value,posQ5+dposMCBC,posQ5-dposMCBC;

!value,posQ5,dposBPMY.5,dposMCBY.B5,dposMCBY.5,dposMCBY.A5;

if bv_aux == 1 then
  lhcb1:install {
! .... BPMYA.5
    MADX['BPMR.5L1.B1'] :setvar {at=-(posq5-dposbpm), from='IP1.L1'},
    MADX['BPM.5R1.B1' ] :setvar {at= (posq5+dposbpm), from='IP1'   },
    MADX['BPMR.5L5.B1'] :setvar {at=-(posq5+dposbpm), from='IP5'   },
    MADX['BPM.5R5.B1' ] :setvar {at= (posq5-dposbpm), from='IP5'   },
! .... MCBC.5
    MADX['MCBCV.5L1.B1'] :setvar {at=-(posq5+dposmcbc), from='IP1.L1'},
    MADX['MCBCH.5R1.B1'] :setvar {at= (posq5-dposmcbc), from='IP1'   },
    MADX['MCBCV.5L5.B1'] :setvar {at=-(posq5-dposmcbc), from='IP5'   },
    MADX['MCBCH.5R5.B1'] :setvar {at= (posq5+dposmcbc), from='IP5'   },
  }
end
lhcb2:install {
! .... BPMYA.5
  MADX['BPM.5L1.B2' ] :setvar {at=-(posq5-dposbpm)*bv_aux, from='IP1.L1'},
  MADX['BPMR.5R1.B2'] :setvar {at= (posq5+dposbpm)*bv_aux, from='IP1'   },
  MADX['BPM.5L5.B2' ] :setvar {at=-(posq5+dposbpm)*bv_aux, from='IP5'   },
  MADX['BPMR.5R5.B2'] :setvar {at= (posq5-dposbpm)*bv_aux, from='IP5'   },
! .... MCBY.B5
  MADX['MCBCH.5L1.B2'] :setvar {at=-(posq5+dposmcbc)*bv_aux, from='IP1.L1'},
  MADX['MCBCV.5R1.B2'] :setvar {at= (posq5-dposmcbc)*bv_aux, from='IP1'   },
  MADX['MCBCH.5L5.B2'] :setvar {at=-(posq5-dposmcbc)*bv_aux, from='IP5'   },
  MADX['MCBCV.5R5.B2'] :setvar {at= (posq5+dposmcbc)*bv_aux, from='IP5'   },
}

! ===============================================
! Q6
! ===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Q6")
end

l_bpmqc= 0.0
bpmqc = monitor 'BPMQC'     { l := l_bpmqc   }

posq6     =\  228.390 + deltaposq6
dposmcbc =\  ((l_mqml + l_mcbch)/2 + 0.192)
dposbpm   =\  l_mqml/2 + 0.745

-- value, posQ6,dposMCBC,dposBPM;

!exec,newel_ir15_b12(BPMQC.6,BPMQC);

install_ir15_b12('MQML.6',    posQ6 );


! no change with respect to the nominal LHC
! Nominal: MCBC Q6 BPM IP1 MCBC Q6 BPM ; BPM Q6 MCBC IP5 BPM Q6 MCBC
! old Upgrade: IR1 Right: BPM Q6 MCBC ; IR5 Right MCBC Q6 BPM

if bv_aux == 1 then
  lhcb1:install {
! .... BPM.6
    MADX['BPM.6L1.B1' ] :setvar {at=-(posq6-dposbpm), from='IP1.L1'},
    MADX['BPMR.6R1.B1'] :setvar {at= (posq6+dposbpm), from='IP1'   },
    MADX['BPM.6L5.B1' ] :setvar {at=-(posq6+dposbpm), from='IP5'   },
    MADX['BPMR.6R5.B1'] :setvar {at= (posq6-dposbpm), from='IP5'   },
! .... MCBC.6
    MADX['MCBCH.6L1.B1'] :setvar {at=-(posq6+dposmcbc), from='IP1.L1'},
    MADX['MCBCV.6R1.B1'] :setvar {at= (posq6-dposmcbc), from='IP1'   },
    MADX['MCBCH.6L5.B1'] :setvar {at=-(posq6-dposmcbc), from='IP5'   },
    MADX['MCBCV.6R5.B1'] :setvar {at= (posq6+dposmcbc), from='IP5'   },
  }
end
lhcb2:install {
! .... BPMYA.5
  MADX['BPMR.6L1.B2'] :setvar {at=-(posq6-dposbpm)*bv_aux, from='IP1.L1'},
  MADX['BPM.6R1.B2' ] :setvar {at= (posq6+dposbpm)*bv_aux, from='IP1'   },
  MADX['BPMR.6L5.B2'] :setvar {at=-(posq6+dposbpm)*bv_aux, from='IP5'   },
  MADX['BPM.6R5.B2' ] :setvar {at= (posq6-dposbpm)*bv_aux, from='IP5'   },
! .... MCBY.B5
  MADX['MCBCV.6L1.B2'] :setvar {at=-(posq6+dposmcbc)*bv_aux, from='IP1.L1'},
  MADX['MCBCH.6R1.B2'] :setvar {at= (posq6-dposmcbc)*bv_aux, from='IP1'   },
  MADX['MCBCV.6L5.B2'] :setvar {at=-(posq6-dposmcbc)*bv_aux, from='IP5'   },
  MADX['MCBCH.6R5.B2'] :setvar {at= (posq6+dposmcbc)*bv_aux, from='IP5'   },
}

! ===============================================
! MS in Q10
! ===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: MS in Q10")
end

posmsq10    =\  l_mqml/2 +0.1795+l_ms/2
posmcbq10   =\  posmsq10+l_ms/2 +0.085+l_mcbv/2

mcbh_10l1_b1 = mcbh 'MCBH.10L1.B1'  { kick := acbh10_l1b1,        polarity=+1, mech_sep=-0.194        }
mcbh_10l5_b1 = mcbh 'MCBH.10L5.B1'  { kick := acbh10_l5b1,        polarity=+1, mech_sep=-0.194        }
mcbv_10r1_b1 = mcbv 'MCBV.10R1.B1'  { kick := acbv10_r1b1*bv_aux, polarity=+1, mech_sep= 0.194        }
mcbv_10r5_b1 = mcbv 'MCBV.10R5.B1'  { kick := acbv10_r5b1*bv_aux, polarity=+1, mech_sep= 0.194        }
mcbv_10l1_b2 = mcbv 'MCBV.10L1.B2'  { kick := acbv10_l1b2*bv_aux, polarity=+1, mech_sep= 0.194*bv_aux }
mcbv_10l5_b2 = mcbv 'MCBV.10L5.B2'  { kick := acbv10_l5b2*bv_aux, polarity=+1, mech_sep= 0.194*bv_aux }
mcbh_10r1_b2 = mcbh 'MCBH.10R1.B2'  { kick := acbh10_r1b2,        polarity=+1, mech_sep=-0.194*bv_aux }
mcbh_10r5_b2 = mcbh 'MCBH.10R5.B2'  { kick := acbh10_r5b2,        polarity=+1, mech_sep=-0.194*bv_aux }

local function disable_sext (ENAM)
  MADX[ENAM..'l1_b1'] = ms ( ENAM..'L1.B1', { k2:=0 } )
  MADX[ENAM..'r1_b1'] = ms ( ENAM..'R1.B1', { k2:=0 } )
  MADX[ENAM..'l5_b1'] = ms ( ENAM..'L5.B1', { k2:=0 } )
  MADX[ENAM..'r5_b1'] = ms ( ENAM..'R5.B1', { k2:=0 } )
  MADX[ENAM..'l1_b2'] = ms ( ENAM..'L1.B2', { k2:=0, polarity=-1*bv_aux } )
  MADX[ENAM..'r1_b2'] = ms ( ENAM..'R1.B2', { k2:=0, polarity=+1*bv_aux } )
  MADX[ENAM..'l5_b2'] = ms ( ENAM..'L5.B2', { k2:=0, polarity=-1*bv_aux } )
  MADX[ENAM..'r5_b2'] = ms ( ENAM..'R5.B2', { k2:=0, polarity=+1*bv_aux } )
  on_cutms_10=1
end

local function enable_sext (ENAM,ksf1,ksd2,ksd1,ksf2)
  MADX[ENAM..'l1_b1'] = ms ( ENAM..'L1.B1', { k2 :=  ksf1_a81b1 } )
  MADX[ENAM..'r1_b1'] = ms ( ENAM..'R1.B1', { k2 :=  ksd2_a12b1 } )
  MADX[ENAM..'l5_b1'] = ms ( ENAM..'L5.B1', { k2 :=  ksf1_a45b1 } )
  MADX[ENAM..'r5_b1'] = ms ( ENAM..'R5.B1', { k2 :=  ksd2_a56b1 } )
  MADX[ENAM..'l1_b2'] = ms ( ENAM..'L1.B2', { k2 := -ksd1_a81b2, polarity=-1*bv_aux } )
  MADX[ENAM..'r1_b2'] = ms ( ENAM..'R1.B2', { k2 := -ksf2_a12b2, polarity=+1*bv_aux } )
  MADX[ENAM..'l5_b2'] = ms ( ENAM..'L5.B2', { k2 := -ksd1_a45b2, polarity=-1*bv_aux } )
  MADX[ENAM..'r5_b2'] = ms ( ENAM..'R5.B2', { k2 := -ksf2_a56b2, polarity=+1*bv_aux } )
  on_cutms_10=0
end

local function disable_sext_f (ENAM)
  MADX[ENAM..'l1_b1'] = ms ( ENAM..'L1.B1', { k2:=0 } )
  MADX[ENAM..'l5_b1'] = ms ( ENAM..'L5.B1', { k2:=0 } )
  MADX[ENAM..'r1_b2'] = ms ( ENAM..'R1.B2', { k2:=0, polarity=+1*bv_aux } )
  MADX[ENAM..'r5_b2'] = ms ( ENAM..'R5.B2', { k2:=0, polarity=+1*bv_aux } )
  on_cutms_10f=1
end

local function disable_sext_f_alt(ENAM)
  MADX[ENAM..'r8_b1'] = ms ( ENAM..'R8.B1', { k2:=0 } )
  MADX[ENAM..'r4_b1'] = ms ( ENAM..'R4.B1', { k2:=0 } )
  MADX[ENAM..'l2_b2'] = ms ( ENAM..'L2.B2', { k2:=0, polarity=+1*bv_aux } )
  MADX[ENAM..'l6_b2'] = ms ( ENAM..'L6.B2', { k2:=0, polarity=+1*bv_aux } )
  on_cutms_14f=1
end

local function disable_sext_d (ENAM)
  MADX[ENAM..'r1_b1'] = ms ( ENAM..'R1.B1', { k2:=0 } )
  MADX[ENAM..'r5_b1'] = ms ( ENAM..'R5.B1', { k2:=0 } )
  MADX[ENAM..'l1_b2'] = ms ( ENAM..'L1.B2', { k2:=0, polarity=+1*bv_aux } )
  MADX[ENAM..'l5_b2'] = ms ( ENAM..'L5.B2', { k2:=0, polarity=+1*bv_aux } )
  on_cutms_10d=1
end

enable_sext('MS.10')

! Q10
if bv_aux == 1 then
  lhcb1:install {
    MADX['MS.10L1.B1'  ] :setvar {at=+posMSQ10, from='MQML.10L1.B1'},
    MADX['MS.10R1.B1'  ] :setvar {at=+posMSQ10, from='MQML.10R1.B1'},
    MADX['MS.10L5.B1'  ] :setvar {at=+posMSQ10, from='MQML.10L5.B1'},
    MADX['MS.10R5.B1'  ] :setvar {at=+posMSQ10, from='MQML.10R5.B1'},
    MADX['MCBH.10L1.B1'] :setvar {at=posMCBQ10, from='MQML.10L1.B1'},
    MADX['MCBV.10R1.B1'] :setvar {at=posMCBQ10, from='MQML.10R1.B1'},
    MADX['MCBH.10L5.B1'] :setvar {at=posMCBQ10, from='MQML.10L5.B1'},
    MADX['MCBV.10R5.B1'] :setvar {at=posMCBQ10, from='MQML.10R5.B1'},
  }
end
lhcb2:install {
  MADX['MS.10L1.B2'  ] :setvar {at=+posMSQ10*bv_aux, from='MQML.10L1.B2'},
  MADX['MS.10R1.B2'  ] :setvar {at=+posMSQ10*bv_aux, from='MQML.10R1.B2'},
  MADX['MS.10L5.B2'  ] :setvar {at=+posMSQ10*bv_aux, from='MQML.10L5.B2'},
  MADX['MS.10R5.B2'  ] :setvar {at=+posMSQ10*bv_aux, from='MQML.10R5.B2'},
  MADX['MCBV.10L1.B2'] :setvar {at=posMCBQ10*bv_aux, from='MQML.10L1.B2'},
  MADX['MCBH.10R1.B2'] :setvar {at=posMCBQ10*bv_aux, from='MQML.10R1.B2'},
  MADX['MCBV.10L5.B2'] :setvar {at=posMCBQ10*bv_aux, from='MQML.10L5.B2'},
  MADX['MCBH.10R5.B2'] :setvar {at=posMCBQ10*bv_aux, from='MQML.10R5.B2'},
}

-- value,posMSQ10,posMCBQ10;
-- value,on_cutMS.10,on_cutMS.14;
if on_cutMS_10  == 1 then disable_sext  ('MS.10') end
if on_cutMS_14  == 1 then disable_sext  ('MS.14') end -- LD: no init
if on_cutMS_10f == 1 then disable_sext_f('MS.10') end
if on_cutMS_14f == 1 then disable_sext_f('MS.14') end
if on_cutMS_10d == 1 then disable_sext_d('MS.10') end
if on_cutMS_14d == 1 then disable_sext_d('MS.14') end

! ===============================================
! Crab cavities
! ===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Crab cavities")
end

crabrf=\ hrf400/lhclength*clight

local function crab_make_tkicker (NNN,FFF)
  omega_crabsc=\ twopi*hrf400/lhclength
  z_crab=\ 0

  phi_crab_l1b1 =\  0
  phi_crab_r1b1 =\  0
  phi_crab_l1b2 =\  0
  phi_crab_r1b2 =\  0
  phi_crab_l5b1 =\  0
  phi_crab_r5b1 =\  0
  phi_crab_l5b2 =\  0
  phi_crab_r5b2 =\  0

  sin_crab_l1b1=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_l1b1)
  sin_crab_r1b1=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_r1b1)
  sin_crab_l1b2=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_l1b2)
  sin_crab_r1b2=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_r1b2)
  sin_crab_l5b1=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_l5b1)
  sin_crab_r5b1=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_r5b1)
  sin_crab_l5b2=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_l5b2)
  sin_crab_r5b2=\ sin(-omega_crabsc*z_crab+twopi*phi_crab_r5b2)

  !sin_crab:=sin(omega_crabsc*z_crab);
  cosi1=\ cos(twopi*phi_ir1/360.) ; sinu1 =\ sin(twopi*phi_ir1/360.)
  cosi5=\ cos(twopi*phi_ir5/360.) ; sinu5 =\ sin(twopi*phi_ir5/360.)
  on_crab1=0; on_crab5=0
  MADX['acfga_4'..NNN..'l1_b1'] = tkicker ( 'ACFGA.4'..NNN..'L1.B1', { l=0, hkick:=on_crab1*ahcrab_l1b1/FFF*sin_crab_l1b1*cosi1,vkick:=on_crab1*avcrab_l1b1/FFF*sin_crab_l1b1*sinu1*bv_aux, mech_sep=-0.194 } )
  MADX['acfga_4'..NNN..'l1_b2'] = tkicker ( 'ACFGA.4'..NNN..'L1.B2', { l=0, hkick:=on_crab1*ahcrab_l1b2/FFF*sin_crab_l1b2*cosi1,vkick:=on_crab1*avcrab_l1b2/FFF*sin_crab_l1b2*sinu1*bv_aux, mech_sep= 0.194*bv_aux } )
  MADX['acfga_4'..NNN..'r1_b1'] = tkicker ( 'ACFGA.4'..NNN..'R1.B1', { l=0, hkick:=on_crab1*ahcrab_r1b1/FFF*sin_crab_r1b1*cosi1,vkick:=on_crab1*avcrab_r1b1/FFF*sin_crab_r1b1*sinu1*bv_aux, mech_sep= 0.194 } )
  MADX['acfga_4'..NNN..'r1_b2'] = tkicker ( 'ACFGA.4'..NNN..'R1.B2', { l=0, hkick:=on_crab1*ahcrab_r1b2/FFF*sin_crab_r1b2*cosi1,vkick:=on_crab1*avcrab_r1b2/FFF*sin_crab_r1b2*sinu1*bv_aux, mech_sep=-0.194*bv_aux } )
  MADX['acfga_4'..NNN..'l5_b1'] = tkicker ( 'ACFGA.4'..NNN..'L5.B1', { l=0, hkick:=on_crab5*ahcrab_l5b1/FFF*sin_crab_l5b1*cosi5,vkick:=on_crab5*avcrab_l5b1/FFF*sin_crab_l5b1*sinu5*bv_aux, mech_sep=-0.194 } )
  MADX['acfga_4'..NNN..'l5_b2'] = tkicker ( 'ACFGA.4'..NNN..'L5.B2', { l=0, hkick:=on_crab5*ahcrab_l5b2/FFF*sin_crab_l5b2*cosi5,vkick:=on_crab5*avcrab_l5b2/FFF*sin_crab_l5b2*sinu5*bv_aux, mech_sep= 0.194*bv_aux } )
  MADX['acfga_4'..NNN..'r5_b1'] = tkicker ( 'ACFGA.4'..NNN..'R5.B1', { l=0, hkick:=on_crab5*ahcrab_r5b1/FFF*sin_crab_r5b1*cosi5,vkick:=on_crab5*avcrab_r5b1/FFF*sin_crab_r5b1*sinu5*bv_aux, mech_sep= 0.194 } )
  MADX['acfga_4'..NNN..'r5_b2'] = tkicker ( 'ACFGA.4'..NNN..'R5.B2', { l=0, hkick:=on_crab5*ahcrab_r5b2/FFF*sin_crab_r5b2*cosi5,vkick:=on_crab5*avcrab_r5b2/FFF*sin_crab_r5b2*sinu5*bv_aux, mech_sep=-0.194*bv_aux } )
end

local function crab_make_marker (NNN)
  MADX['acfga_4'..NNN..'l1_b1'] = marker ( 'ACFGA.4'..NNN..'L1.B1', { mech_sep=-0.194 } )
  MADX['acfga_4'..NNN..'l1_b2'] = marker ( 'ACFGA.4'..NNN..'L1.B2', { mech_sep= 0.194*bv_aux } )
  MADX['acfga_4'..NNN..'r1_b1'] = marker ( 'ACFGA.4'..NNN..'R1.B1', { mech_sep= 0.194 } )
  MADX['acfga_4'..NNN..'r1_b2'] = marker ( 'ACFGA.4'..NNN..'R1.B2', { mech_sep=-0.194*bv_aux } )
  MADX['acfga_4'..NNN..'l5_b1'] = marker ( 'ACFGA.4'..NNN..'L5.B1', { mech_sep=-0.194 } )
  MADX['acfga_4'..NNN..'l5_b2'] = marker ( 'ACFGA.4'..NNN..'L5.B2', { mech_sep= 0.194*bv_aux } )
  MADX['acfga_4'..NNN..'r5_b1'] = marker ( 'ACFGA.4'..NNN..'R5.B1', { mech_sep= 0.194 } )
  MADX['acfga_4'..NNN..'r5_b2'] = marker ( 'ACFGA.4'..NNN..'R5.B2', { mech_sep=-0.194*bv_aux } )
end

local function crab_make_vac_marker (NNN)
  MADX['vacfga_4'..NNN..'l1_b1'] = marker ( 'VACFGA.4'..NNN..'L1.B1',  { mech_sep=-0.194 } )
  MADX['vacfga_4'..NNN..'l1_b2'] = marker ( 'VACFGA.4'..NNN..'L1.B2',  { mech_sep= 0.194*bv_aux } )
  MADX['vacfga_4'..NNN..'r1_b1'] = marker ( 'VACFGA.4'..NNN..'R1.B1',  { mech_sep= 0.194 } )
  MADX['vacfga_4'..NNN..'r1_b2'] = marker ( 'VACFGA.4'..NNN..'R1.B2',  { mech_sep=-0.194*bv_aux } )
  MADX['vacfga_4'..NNN..'l5_b1'] = marker ( 'VACFGA.4'..NNN..'L5.B1',  { mech_sep=-0.194 } )
  MADX['vacfga_4'..NNN..'l5_b2'] = marker ( 'VACFGA.4'..NNN..'L5.B2',  { mech_sep= 0.194*bv_aux } )
  MADX['vacfga_4'..NNN..'r5_b1'] = marker ( 'VACFGA.4'..NNN..'R5.B1',  { mech_sep= 0.194 } )
  MADX['vacfga_4'..NNN..'r5_b2'] = marker ( 'VACFGA.4'..NNN..'R5.B2',  { mech_sep=-0.194*bv_aux } )
end

local function _crab_make_rf (NNN,SIDE,IRN,BIM,FFF)
  local enam = 'ACFGA.4'..NNN..SIDE..IRN..'.'..BIM
  local vnam = '_crab'..NNN..SIDE..IRN..BIM
  MADX[enam] = rfmultipole ( enam, { l=0, freq=crabrf,
                 knl:={0,MADX['kn2'..vnam],MADX['kn3'..vnam],MADX['kn4'..vnam]},
                 ksl:={0,MADX['ks2'..vnam],MADX['ks3'..vnam],MADX['ks4'..vnam]},
                 pnl:={0,MADX['pn2'..vnam],MADX['pn3'..vnam],MADX['pn4'..vnam]},
                 psl:={0,MADX['ps2'..vnam],MADX['ps3'..vnam],MADX['ps4'..vnam]}, } )
end

local function _crab_make_cc (NNN,SIDE,IRN,BIM,FFF)
    !sigmas=0.075;
    local enam = 'ACFGAH.4'..NNN..SIDE..IRN..'.'..BIM
    local vnam = 'crab_'   ..SIDE..IRN..BIM
    local rnam = 'crabref_'..SIDE..IRN..BIM
    MADX['vh'..rnam]=\ MADX['ah'..vnam]/FFF*MADX['cosi'..IRN]*nrj*1e9/1e6
    MADX['vv'..rnam]=\ MADX['av'..vnam]/FFF*MADX['sinu'..IRN]*nrj*1e9/1e6
    MADX[enam] = crabcavity (enam, { l=0,
                             volt:=MADX['on_crab'..IRN]*MADX['vh'..rnam],
                             lag:=MADX['phi_'..vnam],
                             freq=crabrf/1e6,tilt=0,rv3=1e9,rv4=1e9 } )
    local enam = 'ACFGAV.4'..NNN..SIDE..IRN..'.'..BIM
    MADX[enam] = crabcavity (enam, { l=0,
                             volt:=MADX['on_crab'..IRN]*MADX['vv'..rnam],
                             lag:=MADX['phi_'..vnam],
                             freq=crabrf/1e6,tilt=0,rv3=1e9,rv4=1e9 } )
--     print,text="making acfgah.4nnnsideirn.bim";
--     print,text="making acfgav.4nnnsideirn.bim";
end

local function crab_make_cc (NNN,FFF)
  _crab_make_cc(NNN,'L','5','B1',FFF)
  _crab_make_cc(NNN,'L','5','B2',FFF)
  _crab_make_cc(NNN,'R','5','B1',FFF)
  _crab_make_cc(NNN,'R','5','B2',FFF)
  _crab_make_cc(NNN,'L','1','B1',FFF)
  _crab_make_cc(NNN,'L','1','B2',FFF)
  _crab_make_cc(NNN,'R','1','B1',FFF)
  _crab_make_cc(NNN,'R','1','B2',FFF)
end

local function crab_make_rf (NNN,FFF)
  _crab_make_rf(NNN,'L','5','B1',FFF)
  _crab_make_rf(NNN,'L','5','B2',FFF)
  _crab_make_rf(NNN,'R','5','B1',FFF)
  _crab_make_rf(NNN,'R','5','B2',FFF)
  _crab_make_rf(NNN,'L','1','B1',FFF)
  _crab_make_rf(NNN,'L','1','B2',FFF)
  _crab_make_rf(NNN,'R','1','B1',FFF)
  _crab_make_rf(NNN,'R','1','B2',FFF)
end

!PF1 Position IP side (front) Point 1
!PB1 Position nonIP side (back) Point 1

local function crab_install (NNN,P1B1,P1B2,P5B1,P5B2)
  -- value,P1B1,P1B2,P5B1,P5B2;
  if bv_aux == 1 then
    lhcb1:install {
      MADX['ACFGA.4' ..NNN..'L5.B1'] :setvar {at=-P5B1, from='IP5'   },
      MADX['ACFGA.4' ..NNN..'R5.B1'] :setvar {at= P5B1, from='IP5'   },
      MADX['ACFGA.4' ..NNN..'L1.B1'] :setvar {at=-P1B1, from='IP1.L1'},
      MADX['ACFGA.4' ..NNN..'R1.B1'] :setvar {at= P1B1, from='IP1'   },
      MADX['VACFGA.4'..NNN..'L5.B1'] :setvar {at=-P5B2, from='IP5'   },
      MADX['VACFGA.4'..NNN..'R5.B1'] :setvar {at= P5B2, from='IP5'   },
      MADX['VACFGA.4'..NNN..'L1.B1'] :setvar {at=-P1B2, from='IP1.L1'},
      MADX['VACFGA.4'..NNN..'R1.B1'] :setvar {at= P1B2, from='IP1'   },
    }
  end
  lhcb2:install {
    MADX['ACFGA.4' ..NNN..'L5.B2'] :setvar {at=-P5B2*bv_aux, from='IP5'   },
    MADX['ACFGA.4' ..NNN..'R5.B2'] :setvar {at= P5B2*bv_aux, from='IP5'   },
    MADX['ACFGA.4' ..NNN..'L1.B2'] :setvar {at=-P1B2*bv_aux, from='IP1.L1'},
    MADX['ACFGA.4' ..NNN..'R1.B2'] :setvar {at= P1B2*bv_aux, from='IP1'   },
    MADX['VACFGA.4'..NNN..'L5.B2'] :setvar {at=-P5B1*bv_aux, from='IP5'   },
    MADX['VACFGA.4'..NNN..'R5.B2'] :setvar {at= P5B1*bv_aux, from='IP5'   },
    MADX['VACFGA.4'..NNN..'L1.B2'] :setvar {at=-P1B1*bv_aux, from='IP1.L1'},
    MADX['VACFGA.4'..NNN..'R1.B2'] :setvar {at= P1B1*bv_aux, from='IP1'   },
  }
end

local function crab_install_cc (NNN,P1B1,P1B2,P5B1,P5B2)
  if bv_aux == 1 then
    lhcb1:install {
      MADX['ACFGAH.4'..NNN..'L5.B1'] :setvar {at=-P5B1, from='IP5'   },
      MADX['ACFGAH.4'..NNN..'R5.B1'] :setvar {at= P5B1, from='IP5'   },
      MADX['ACFGAH.4'..NNN..'L1.B1'] :setvar {at=-P1B1, from='IP1.L1'},
      MADX['ACFGAH.4'..NNN..'R1.B1'] :setvar {at= P1B1, from='IP1'   },
      MADX['ACFGAV.4'..NNN..'L5.B1'] :setvar {at=-P5B1, from='IP5'   },
      MADX['ACFGAV.4'..NNN..'R5.B1'] :setvar {at= P5B1, from='IP5'   },
      MADX['ACFGAV.4'..NNN..'L1.B1'] :setvar {at=-P1B1, from='IP1.L1'},
      MADX['ACFGAV.4'..NNN..'R1.B1'] :setvar {at= P1B1, from='IP1'   },
    }
  end
  lhcb2:install {
    MADX['ACFGAH.4'..NNN..'L5.B2'] :setvar {at=-P5B2*bv_aux, from='IP5'   },
    MADX['ACFGAH.4'..NNN..'R5.B2'] :setvar {at= P5B2*bv_aux, from='IP5'   },
    MADX['ACFGAH.4'..NNN..'L1.B2'] :setvar {at=-P1B2*bv_aux, from='IP1.L1'},
    MADX['ACFGAH.4'..NNN..'R1.B2'] :setvar {at= P1B2*bv_aux, from='IP1'   },
    MADX['ACFGAV.4'..NNN..'L5.B2'] :setvar {at=-P5B2*bv_aux, from='IP5'   },
    MADX['ACFGAV.4'..NNN..'R5.B2'] :setvar {at= P5B2*bv_aux, from='IP5'   },
    MADX['ACFGAV.4'..NNN..'L1.B2'] :setvar {at=-P1B2*bv_aux, from='IP1.L1'},
    MADX['ACFGAV.4'..NNN..'R1.B2'] :setvar {at= P1B2*bv_aux, from='IP1'   },
  }
end

local function crab_remove(NNN)
  local lst = { 'ACFGA.4' ..NNN..'L5.B', 'ACFGA.4' ..NNN..'R5.B',
                'ACFGA.4' ..NNN..'L1.B', 'ACFGA.4' ..NNN..'R1.B',
                'ACFGAH.4'..NNN..'L5.B', 'ACFGAH.4'..NNN..'R5.B',
                'ACFGAH.4'..NNN..'L1.B', 'ACFGAH.4'..NNN..'R1.B',
                'ACFGAV.4'..NNN..'L5.B', 'ACFGAV.4'..NNN..'R5.B',
                'ACFGAV.4'..NNN..'L1.B', 'ACFGAV.4'..NNN..'R1.B',
                'VACFGA.4'..NNN..'L5.B', 'VACFGA.4'..NNN..'R5.B',
                'VACFGA.4'..NNN..'L1.B', 'VACFGA.4'..NNN..'R1.B', }

  if bv_aux == 1 then
    lhcb1:deselect()
    for _,e in ipairs(lst) do
     if lhcb1[e..1] then lhcb1[e..1]:select() end
    end
    local er, ir = lhcb1:remove {flag=selected}
  --print(#er, #ir, #lhcb1)
  end

  lhcb2:deselect()
  for _,e in ipairs(lst) do
   if lhcb2[e..2] then lhcb2[e..2]:select() end
  end
  local er, ir = lhcb2:remove {flag=selected}
  --print(#er, #ir, #lhcb1)
end

crab_make_tkicker('A', 2)
crab_make_tkicker('B', 2)

crab_make_vac_marker('A')
crab_make_vac_marker('B')

crab_remove('A')
crab_remove('B')

! layout
! B1 B2 IP B2 B1

posRFDB2A=155.885;  posDQWB2A=155.975;
posRFDB2B=157.005;  posDQWB2B=156.875;
posRFDB1A=159.921;  posDQWB1A=159.549;
posRFDB1B=161.041;  posDQWB1B=160.449;

!staggered          IR1B1     IR1B2     IR5B1     IR5B2
crab_install('A',posRFDB1A,posRFDB2A,posDQWB1A,posDQWB2A)
crab_install('B',posRFDB1B,posRFDB2B,posDQWB1B,posDQWB2B)

!===============================================
! Masks
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: Masks")
end

!compared to HLLHCV1.1:
!- mask in front of D2 removed
!- mask in front of Q4 removed

l_tclmb=1.0
l_tclmc=1.0

!posTCLMC.5  := posQ5 - dposMCBY.A5 - l.MCBY/2 - l.TCLMB/2 - 1.835;!930+655+500/2
!posTCLMC.6C := posQ6 - dposMCBCH - l.TCLMC/2 - 1.831;!926+655+500/2
!posTCLMC.6Q := posQ6 - dposMCBCH - l.TCLMC/2 - 1.831;
!value,posTCLMC.5,posTCLMC.6C,posTCLMC.6Q;

! end q4   vac - tcl mech length     pos MCBY
! 173022 - 759 - 1500/2 =171513      174939
postclmb_4c =\  posq4 - dposmcby_a4 - 3.461
postclmc_5c =\  posq5 - l_mqml/2-0.192-l_mcbch-0.926-1.405
postclmc_5q =\  posq5 - l_mqml/2-2.955
postclmc_6c =\  posq6 - l_mqml/2-0.192-l_mcbch-0.926-1.405
postclmc_6q =\  posq6 - l_mqml/2-2.816

tclmb = collimator 'TCLMB'  { l := l_tclmb }
tclmc = collimator 'TCLMC'  { l := l_tclmc }

newel_ir15_b12('TCLMB.4',TCLMB,arcSEP)
newel_ir15_b12('TCLMC.5',TCLMC,arcSEP)
newel_ir15_b12('TCLMC.6',TCLMC,arcSEP)

!mask Q5
install_ir15_b1_b2_inv('TCLMB.4', posTCLMB_4C, posTCLMB_4C );
install_ir15_b1_b2_inv('TCLMC.5', posTCLMC_5C, posTCLMC_5Q );
install_ir15_b1_b2_inv('TCLMC.6', posTCLMC_6C, posTCLMC_6Q );

!!mask Q6
-- if(bv_aux == 1){
!seqedit,sequence=lhcb1;
!! ... TCLMC
!install,element=TCLMC.6L1.B1,at=-posTCLMC.6C, from= IP1.L1;
!install,element=TCLMC.6R1.B1,at= posTCLMC.6Q, from= IP1;
!install,element=TCLMC.6L5.B1,at=-posTCLMC.6Q, from= IP5;
!install,element=TCLMC.6R5.B1,at= posTCLMC.6C, from= IP5;
!endedit;
!};
!
!seqedit,sequence=lhcb2;
!! ... TCLMC
!install,element=TCLMC.6L1.B2, at=(-posTCLMC.6C)*bv_aux, from= IP1.L1;
!install,element=TCLMC.6R1.B2, at=( posTCLMC.6Q)*bv_aux, from= IP1;
!install,element=TCLMC.6L5.B2, at=(-posTCLMC.6Q)*bv_aux, from= IP5;
!install,element=TCLMC.6R5.B2, at=( posTCLMC.6C)*bv_aux, from= IP5;
!endedit;

!===============================================
! TAN, TCTs, TCLs
!===============================================

if option.debug > 0 then
  print("*** SLHC SECTION: TAN, TCTs, TCLs")
end

if L_TAXN == 0 then L_TAXN=3.492 end

if L_TCLPX  == 0 then L_TCLPX  = 1 end
if L_TCTPXH == 0 then L_TCTPXH = 1 end
if L_TCTPXV == 0 then L_TCTPXV = 1 end

-- value,L.TAXN,L.TCLPX,L.TCTPXH,L.TCTPXV;
! shielding collimation
! v6.503  10.425 ,   7.335 ,   5.655 ,   3.445 ,   2.0805
! slhc 1.275 closer to D2
!D2 region, posBPMWQ = BPM right in front of D2

! Gentini Option 2 (starts at 137340)

postclpx   =\  posd2-l_mbrd/2-0.866-1.726 + deltapostaxn
postctpxh  =\  postclpx-1.586
postctpxv  =\  postctpxh-1.5385
postaxn   =\  postctpxv-1.1625-0.183-l_taxn/2
!old layout TAXN non-ip side 128801+3332/2=130467
!           TAXN flange non-ip side 137640-(1480+523+1476+281+1476+208+285+702+480)=130729
!           TAXN flange 130729-130467 =  262

postaxna  =\  postaxn - l_taxn/2
postaxnb  =\  postaxn + l_taxn/2
postclpxa  =\  postclpx - l_tclpx/2
postclpxb  =\  postclpx + l_tclpx/2
postctpxha  =\  postctpxh - l_tctpxh/2
postctpxhb  =\  postctpxh + l_tctpxh/2
postctpxva  =\  postctpxv - l_tctpxv/2
postctpxvb  =\  postctpxv + l_tctpxv/2

septclpx   =\  round((postclpx -posd1)/(posd2-posd1)*194*10)/1e4
septctpxh  =\  round((postctpxh-posd1)/(posd2-posd1)*194*10)/1e4
septctpxv  =\  round((postctpxv-posd1)/(posd2-posd1)*194*10)/1e4
septclpxa  =\  round((postclpxa -posd1)/(posd2-posd1)*194*10)/1e4
septctpxha =\  round((postctpxha-posd1)/(posd2-posd1)*194*10)/1e4
septctpxva =\  round((postctpxva-posd1)/(posd2-posd1)*194*10)/1e4
septclpxb  =\  round((postclpxb -posd1)/(posd2-posd1)*194*10)/1e4
septctpxhb =\  round((postctpxhb-posd1)/(posd2-posd1)*194*10)/1e4
septctpxvb =\  round((postctpxvb-posd1)/(posd2-posd1)*194*10)/1e4

septaxn   =\  round((postaxn -posd1)/(posd2-posd1)*194)/1e3
septaxna  =\  round((postaxna -posd1)/(posd2-posd1)*194)/1e3
septaxnb  =\  round((postaxnb -posd1)/(posd2-posd1)*194)/1e3

-- value,posTAXN,posTAXNA,posTAXNB;
-- value,posTCLPX,posTCLPXA,posTCLPXB;
-- value,posTCTPXH,posTCTPXHA,posTCTPXHB;
-- value,posTCTPXV,posTCTPXVA,posTCTPXVB;

-- value,sepTAXN,sepTAXNA,sepTAXNB;
-- value,sepTCLPX,sepTCLPXA,sepTCLPXB;
-- value,sepTCTPXH,sepTCTPXHA,sepTCTPXHB;
-- value,sepTCTPXV,sepTCTPXVA,sepTCTPXVB;

!Q5/Q6 region
postcl_5c =\  posq5 - l_mqml/2-0.192-l_mcbch-0.926-1.544-2.010
postcl_5q =\  posq5 - l_mqml/2-1.411-1.544-2.010
postcl_6c =\  posq6 - l_mqml/2-0.192-l_mcbch-0.926-1.405-2.010
postcl_6q =\  posq6 - l_mqml/2-1.411-1.405-2.010

!posTCTPXV.6Q := posQ5 + l.mqml/2+1.435+1.915; !8.7655 - 4.235; !left !was 1.664
!posTCTPH.6Q := posQ5 + l.mqml/2+1.435+1.915+2.000;!10.765 - 4.235; !left

postctpxv_6q =\  posq5 + l_mqml/2+1.411+2.949
postctph_6q =\  posq5 + l_mqml/2 +1.411+2.949+2.000
postctpxv_6c =\  posq5 + l_mqml/2+2.018+2.949
postctph_6c =\  posq5 + l_mqml/2 +2.018+2.949+2.000


-- value,posTCL.5C,posTCL.5Q,posTCL.6C,posTCL.6Q;
-- value,posTCTPXV.6Q,posTCTPH.6Q,posTCTPXV.6C,posTCTPH.6C;


l_tctph=1
l_tctpv=1

tctph = collimator 'TCTPH'  { l:=l_tctph }
tctpv = collimator 'TCTPV'  { l:=l_tctpv }

l_tclpx=1
tclpx = collimator 'TCLPX'  { l:=l_tclpx }

tclpx_4r1_b1 = tclpx 'TCLPX.4R1.B1'  { mech_sep= septclpx }
tclpx_4l1_b2 = tclpx 'TCLPX.4L1.B2'  { mech_sep= septclpx*bv_aux }
tclpx_4r5_b1 = tclpx 'TCLPX.4R5.B1'  { mech_sep= septclpx }
tclpx_4l5_b2 = tclpx 'TCLPX.4L5.B2'  { mech_sep= septclpx*bv_aux }

vtclpx_4r1_a_b2 = marker 'VTCLPX.4R1.A.B2'  { mech_sep=-septclpx }
vtclpx_4l1_a_b1 = marker 'VTCLPX.4L1.A.B1'  { mech_sep=-septclpx*bv_aux }
vtclpx_4r5_a_b2 = marker 'VTCLPX.4R5.A.B2'  { mech_sep=-septclpx }
vtclpx_4l5_a_b1 = marker 'VTCLPX.4L5.A.B1'  { mech_sep=-septclpx*bv_aux }

vtclpx_4r1_b_b2 = marker 'VTCLPX.4R1.B.B2'  { mech_sep=-septclpx }
vtclpx_4l1_b_b1 = marker 'VTCLPX.4L1.B.B1'  { mech_sep=-septclpx*bv_aux }
vtclpx_4r5_b_b2 = marker 'VTCLPX.4R5.B.B2'  { mech_sep=-septclpx }
vtclpx_4l5_b_b1 = marker 'VTCLPX.4L5.B.B1'  { mech_sep=-septclpx*bv_aux }


tcl_5r1_b1 = tcl 'TCL.5R1.B1'  { mech_sep= 0.194 }
tcl_5l1_b2 = tcl 'TCL.5L1.B2'  { mech_sep= 0.194*bv_aux }
tcl_5r5_b1 = tcl 'TCL.5R5.B1'  { mech_sep= 0.194 }
tcl_5l5_b2 = tcl 'TCL.5L5.B2'  { mech_sep= 0.194*bv_aux }



tcl_6r1_b1 = tcl 'TCL.6R1.B1'  { mech_sep= 0.194 }
tcl_6l1_b2 = tcl 'TCL.6L1.B2'  { mech_sep= 0.194*bv_aux }
tcl_6r5_b1 = tcl 'TCL.6R5.B1'  { mech_sep= 0.194 }
tcl_6l5_b2 = tcl 'TCL.6L5.B2'  { mech_sep= 0.194*bv_aux }




taxn = collimator 'TAXN'  { l:=l_taxn }

taxn_4r1 = taxn 'TAXN.4R1' {  }
taxn_4r5 = taxn 'TAXN.4R5' {  }
taxn_4l1 = taxn 'TAXN.4L1' {  }
taxn_4l5 = taxn 'TAXN.4L5' {  }

vtaxna_4l1_b1 = marker 'VTAXNA.4L1.B1'  { mech_sep=-septaxna }
vtaxna_4l1_b2 = marker 'VTAXNA.4L1.B2'  { mech_sep= septaxna*bv_aux }
vtaxna_4l5_b1 = marker 'VTAXNA.4L5.B1'  { mech_sep=-septaxna }
vtaxna_4l5_b2 = marker 'VTAXNA.4L5.B2'  { mech_sep= septaxna*bv_aux }
vtaxna_4r1_b1 = marker 'VTAXNA.4R1.B1'  { mech_sep= septaxna }
vtaxna_4r1_b2 = marker 'VTAXNA.4R1.B2'  { mech_sep=-septaxna*bv_aux }
vtaxna_4r5_b1 = marker 'VTAXNA.4R5.B1'  { mech_sep= septaxna }
vtaxna_4r5_b2 = marker 'VTAXNA.4R5.B2'  { mech_sep=-septaxna*bv_aux }
vtaxnb_4l1_b1 = marker 'VTAXNB.4L1.B1'  { mech_sep=-septaxnb }
vtaxnb_4l1_b2 = marker 'VTAXNB.4L1.B2'  { mech_sep= septaxnb*bv_aux }
vtaxnb_4l5_b1 = marker 'VTAXNB.4L5.B1'  { mech_sep=-septaxnb }
vtaxnb_4l5_b2 = marker 'VTAXNB.4L5.B2'  { mech_sep= septaxnb*bv_aux }
vtaxnb_4r1_b1 = marker 'VTAXNB.4R1.B1'  { mech_sep= septaxnb }
vtaxnb_4r1_b2 = marker 'VTAXNB.4R1.B2'  { mech_sep=-septaxnb*bv_aux }
vtaxnb_4r5_b1 = marker 'VTAXNB.4R5.B1'  { mech_sep= septaxnb }
vtaxnb_4r5_b2 = marker 'VTAXNB.4R5.B2'  { mech_sep=-septaxnb*bv_aux }


l_tctpxv=1
l_tctphx=1

tctpxv = collimator 'TCTPXV'  { l:=l_tctpxv }
tctphx = collimator 'TCTPHX'  { l:=l_tctphx }
tctpxv_4l1_b1 = tctpxv 'TCTPXV.4L1.B1'  { mech_sep=-septctpxv }
tctpxv_4l5_b1 = tctpxv 'TCTPXV.4L5.B1'  { mech_sep=-septctpxv }
tctpxv_4r1_b2 = tctpxv 'TCTPXV.4R1.B2'  { mech_sep=-septctpxv*bv_aux }
tctpxv_4r5_b2 = tctpxv 'TCTPXV.4R5.B2'  { mech_sep=-septctpxv*bv_aux }
tctpxh_4l1_b1 = tctphx 'TCTPXH.4L1.B1'  { mech_sep=-septctpxh }
tctpxh_4l5_b1 = tctphx 'TCTPXH.4L5.B1'  { mech_sep=-septctpxh }
tctpxh_4r1_b2 = tctphx 'TCTPXH.4R1.B2'  { mech_sep=-septctpxh*bv_aux }
tctpxh_4r5_b2 = tctphx 'TCTPXH.4R5.B2'  { mech_sep=-septctpxh*bv_aux }

vtctpxv_4l1_a_b2 = marker 'VTCTPXV.4L1.A.B2'  { mech_sep= septctpxv*bv_aux }
vtctpxv_4l5_a_b2 = marker 'VTCTPXV.4L5.A.B2'  { mech_sep= septctpxv*bv_aux }
vtctpxv_4r1_a_b1 = marker 'VTCTPXV.4R1.A.B1'  { mech_sep= septctpxv }
vtctpxv_4r5_a_b1 = marker 'VTCTPXV.4R5.A.B1'  { mech_sep= septctpxv }
vtctpxh_4l1_a_b2 = marker 'VTCTPXH.4L1.A.B2'  { mech_sep= septctpxh*bv_aux }
vtctpxh_4l5_a_b2 = marker 'VTCTPXH.4L5.A.B2'  { mech_sep= septctpxh*bv_aux }
vtctpxh_4r1_a_b1 = marker 'VTCTPXH.4R1.A.B1'  { mech_sep= septctpxh }
vtctpxh_4r5_a_b1 = marker 'VTCTPXH.4R5.A.B1'  { mech_sep= septctpxh }

vtctpxv_4l1_b_b2 = marker 'VTCTPXV.4L1.B.B2'  { mech_sep= septctpxv*bv_aux }
vtctpxv_4l5_b_b2 = marker 'VTCTPXV.4L5.B.B2'  { mech_sep= septctpxv*bv_aux }
vtctpxv_4r1_b_b1 = marker 'VTCTPXV.4R1.B.B1'  { mech_sep= septctpxv }
vtctpxv_4r5_b_b1 = marker 'VTCTPXV.4R5.B.B1'  { mech_sep= septctpxv }
vtctpxh_4l1_b_b2 = marker 'VTCTPXH.4L1.B.B2'  { mech_sep= septctpxh*bv_aux }
vtctpxh_4l5_b_b2 = marker 'VTCTPXH.4L5.B.B2'  { mech_sep= septctpxh*bv_aux }
vtctpxh_4r1_b_b1 = marker 'VTCTPXH.4R1.B.B1'  { mech_sep= septctpxh }
vtctpxh_4r5_b_b1 = marker 'VTCTPXH.4R5.B.B1'  { mech_sep= septctpxh }


tctph_6l1_b1 = tctph 'TCTPH.6L1.B1'  { mech_sep=-0.194 }
tctpv_6l1_b1 = tctpv 'TCTPV.6L1.B1'  { mech_sep=-0.194 }
tctph_6r1_b2 = tctph 'TCTPH.6R1.B2'  { mech_sep=-0.194*bv_aux }
tctpv_6r1_b2 = tctpv 'TCTPV.6R1.B2'  { mech_sep=-0.194*bv_aux }
tctph_6l5_b1 = tctph 'TCTPH.6L5.B1'  { mech_sep=-0.194 }
tctpv_6l5_b1 = tctpv 'TCTPV.6L5.B1'  { mech_sep=-0.194 }
tctph_6r5_b2 = tctph 'TCTPH.6R5.B2'  { mech_sep=-0.194*bv_aux }
tctpv_6r5_b2 = tctpv 'TCTPV.6R5.B2'  { mech_sep=-0.194*bv_aux }


l_bptxaux=0.285
posbptx=postclmb_4c-1.5/2-0.301-l_bptxaux/2
posbptx=165


apwl_4l1_b1 = apwl 'APWL.4L1.B1'  { mech_sep=-0.194 }
apwl_4l1_b2 = apwl 'APWL.4L1.B2'  { mech_sep= 0.194*bv_aux }
apwl_4l5_b1 = apwl 'APWL.4L5.B1'  { mech_sep=-0.194 }
apwl_4l5_b2 = apwl 'APWL.4L5.B2'  { mech_sep= 0.194*bv_aux }
apwl_4r1_b1 = apwl 'APWL.4R1.B1'  { mech_sep= 0.194 }
apwl_4r1_b2 = apwl 'APWL.4R1.B2'  { mech_sep=-0.194*bv_aux }
apwl_4r5_b1 = apwl 'APWL.4R5.B1'  { mech_sep= 0.194 }
apwl_4r5_b2 = apwl 'APWL.4R5.B2'  { mech_sep=-0.194*bv_aux }

l_apwlaux=0.6
posapwl1=165.102
posapwl2=164.502
posapwl3=164.600
posapwl4=164.000

install_ir15_b1_b2_alt4('APWL.4','APWL.4',posAPWL1,posAPWL2,posAPWL3,posAPWL4)

install_ir15_cmn  ('TAXN.4'  ,posTAXN)
install_ir15_b1_b2('VTAXNA.4',posTAXNA,posTAXNA)
install_ir15_b1_b2('VTAXNB.4',posTAXNB,posTAXNB)

if bv_aux == 1 then
  lhcb1:install {
! ... TCTPH
    MADX['TCTPXH.4L1.B1'   ] :setvar {at=-posTCTPXH,   from='IP1.L1'},
    MADX['TCTPXH.4L5.B1'   ] :setvar {at=-posTCTPXH,   from='IP5'   },
    MADX['VTCTPXH.4R1.A.B1'] :setvar {at= posTCTPXHA,  from='IP1'   },
    MADX['VTCTPXH.4R5.A.B1'] :setvar {at= posTCTPXHA,  from='IP5'   },
    MADX['VTCTPXH.4R1.B.B1'] :setvar {at= posTCTPXHB,  from='IP1'   },
    MADX['VTCTPXH.4R5.B.B1'] :setvar {at= posTCTPXHB,  from='IP5'   },
    MADX['TCTPH.6L1.B1'    ] :setvar {at=-posTCTPH_6C, from='IP1.L1'},
    MADX['TCTPH.6L5.B1'    ] :setvar {at=-posTCTPH_6Q, from='IP5'   },
! ... TCTPV
    MADX['TCTPXV.4L1.B1'   ] :setvar {at=-posTCTPXV,    from='IP1.L1'},
    MADX['TCTPXV.4L5.B1'   ] :setvar {at=-posTCTPXV,    from='IP5'   },
    MADX['VTCTPXV.4R1.A.B1'] :setvar {at= posTCTPXVA,   from='IP1'   },
    MADX['VTCTPXV.4R5.A.B1'] :setvar {at= posTCTPXVA,   from='IP5'   },
    MADX['VTCTPXV.4R1.B.B1'] :setvar {at= posTCTPXVB,   from='IP1'   },
    MADX['VTCTPXV.4R5.B.B1'] :setvar {at= posTCTPXVB,   from='IP5'   },
    MADX['TCTPV.6L1.B1'    ] :setvar {at=-posTCTPXV_6C, from='IP1.L1'},
    MADX['TCTPV.6L5.B1'    ] :setvar {at=-posTCTPXV_6Q, from='IP5'   },
! ... TCL
    MADX['TCLPX.4R1.B1'    ] :setvar {at= posTCLPX,     from='IP1'   },
    MADX['TCLPX.4R5.B1'    ] :setvar {at= posTCLPX,     from='IP5'   },
    MADX['VTCLPX.4L1.A.B1' ] :setvar {at=-posTCLPXA,    from='IP1.L1'},
    MADX['VTCLPX.4L5.A.B1' ] :setvar {at=-posTCLPXA,    from='IP5'   },
    MADX['VTCLPX.4L1.B.B1' ] :setvar {at=-posTCLPXB,    from='IP1.L1'},
    MADX['VTCLPX.4L5.B.B1' ] :setvar {at=-posTCLPXB,    from='IP5'   },
    MADX['TCL.5R1.B1'      ] :setvar {at= posTCL_5C,    from='IP1'   },
    MADX['TCL.5R5.B1'      ] :setvar {at= posTCL_5Q,    from='IP5'   },
    MADX['TCL.6R1.B1'      ] :setvar {at= posTCL_6C,    from='IP1'   },
    MADX['TCL.6R5.B1'      ] :setvar {at= posTCL_6Q,    from='IP5'   },
! ... BPTX
!    MADX['BPTX.4L1.B1'     ] :setvar {at=-posBPTX,      from='IP1.L1'}, -- BUG: does not exist!
!    MADX['BPTX.4L5.B1'     ] :setvar {at=-posBPTX,      from='IP5'   }, -- BUG: does not exist!
  }
end
lhcb2:install {
! ... TCTPH
    MADX['VTCTPXH.4L1.A.B2'] :setvar {at=-posTCTPXHA*bv_aux  , from='IP1.L1'},
    MADX['VTCTPXH.4L5.A.B2'] :setvar {at=-posTCTPXHA*bv_aux  , from='IP5'   },
    MADX['VTCTPXH.4L1.B.B2'] :setvar {at=-posTCTPXHB*bv_aux  , from='IP1.L1'},
    MADX['VTCTPXH.4L5.B.B2'] :setvar {at=-posTCTPXHB*bv_aux  , from='IP5'   },
    MADX['TCTPXH.4R1.B2'   ] :setvar {at= posTCTPXH*bv_aux   , from='IP1'   },
    MADX['TCTPXH.4R5.B2'   ] :setvar {at= posTCTPXH*bv_aux   , from='IP5'   },
    MADX['TCTPH.6R1.B2'    ] :setvar {at= posTCTPH_6Q*bv_aux , from='IP1'   },
    MADX['TCTPH.6R5.B2'    ] :setvar {at= posTCTPH_6C*bv_aux , from='IP5'   },
! ... TCTPV
    MADX['TCTPXV.4R1.B2'   ] :setvar {at= posTCTPXV*bv_aux   , from='IP1'   },
    MADX['TCTPXV.4R5.B2'   ] :setvar {at= posTCTPXV*bv_aux   , from='IP5'   },
    MADX['VTCTPXV.4L1.A.B2'] :setvar {at=-posTCTPXVA*bv_aux  , from='IP1.L1'},
    MADX['VTCTPXV.4L5.A.B2'] :setvar {at=-posTCTPXVA*bv_aux  , from='IP5'   },
    MADX['VTCTPXV.4L1.B.B2'] :setvar {at=-posTCTPXVB*bv_aux  , from='IP1.L1'},
    MADX['VTCTPXV.4L5.B.B2'] :setvar {at=-posTCTPXVB*bv_aux  , from='IP5'   },
    MADX['TCTPV.6R1.B2'    ] :setvar {at= posTCTPXV_6Q*bv_aux, from='IP1'   },
    MADX['TCTPV.6R5.B2'    ] :setvar {at= posTCTPXV_6C*bv_aux, from='IP5'   },
! ... TCL
    MADX['TCLPX.4L1.B2'    ] :setvar {at=-posTCLPX*bv_aux    , from='IP1.L1'},
    MADX['TCLPX.4L5.B2'    ] :setvar {at=-posTCLPX*bv_aux    , from='IP5'   },
    MADX['VTCLPX.4R1.A.B2' ] :setvar {at= posTCLPXA*bv_aux   , from='IP1'   },
    MADX['VTCLPX.4R5.A.B2' ] :setvar {at= posTCLPXA*bv_aux   , from='IP5'   },
    MADX['VTCLPX.4R1.B.B2' ] :setvar {at= posTCLPXB*bv_aux   , from='IP1'   },
    MADX['VTCLPX.4R5.B.B2' ] :setvar {at= posTCLPXB*bv_aux   , from='IP5'   },
    MADX['TCL.5L1.B2'      ] :setvar {at=-posTCL_5Q*bv_aux   , from='IP1.L1'},
    MADX['TCL.5L5.B2'      ] :setvar {at=-posTCL_5C*bv_aux   , from='IP5'   },
    MADX['TCL.6L1.B2'      ] :setvar {at=-posTCL_6Q*bv_aux   , from='IP1.L1'},
    MADX['TCL.6L5.B2'      ] :setvar {at=-posTCL_6C*bv_aux   , from='IP5'   },
! ... BPTX
!    MADX['BPTX.4R1.B2'     ] :setvar {at= posBPTX*bv_aux     , from='IP1'   }, -- BUG: does not exist!
!    MADX['BPTX.4R5.B2'     ] :setvar {at= posBPTX*bv_aux     , from='IP5'   }, -- BUG: does not exist!
}

!------
! BBLR
!-------

if option.debug > 0 then
  print("*** SLHC SECTION: BBLR")
end

l_bblr=3.5
bblr = placeholder 'BBLR'  { l=l_bblr }
posbblra=188.07
posbblrb=192.87

newel_ir15_b12('BBLR.4',BBLR,arcSEP)
install_ir15_b1_b2_alt('BBLR.4',posBBLRB,posBBLRA)

! -------
! Install MBH
! -------

if option.debug > 0 then
  print("*** SLHC SECTION: MBH")
end

mbh_rm_mcs=0; mbh_rm_mcdo=0; !=1 to remove spools
mbh_ir2q8=0;mbh_ir2q10=0;
mbh_ir7q8a=0; mbh_ir7q8b=0;
mbh_ir7q9a=1; mbh_ir7q9b=0;
mbh_ir7q10a=0; mbh_ir7q10b=0;
mbh_ir1q8=0;mbh_ir1q9=0;mbh_ir1q10=0;
mbh_ir5q8=0;mbh_ir5q9=0;mbh_ir5q10=0;

!call,file="slhc/toolkit/install_mbh.madx";


l_mbh                = 5.307
kmax_mbh             = 11.23
kmin_mbh             = 0.2460
imax_mbh             = 11850
l_tcld              = 1



!mbh_rm_mcs=0; ! =1 remove mcs
!mbh_rm_mcdo=0; ! =1 remove mco,mcd

mbh = rbend 'MBH' { l := l_mbh, kmax := kmax_mbh, kmin := kmin_mbh,
                    calib := kmax_mbh / imax_mbh }

tcld = collimator 'tcld'  { l=l_tcld }

local install_mbh_macro = [=[ -- mbm,mbn,irn,ira,irb
  local print, assert, ipairs in _G
  local option                in MAD
  local selected              in MAD.element.flags
  local tblcat                in MAD.utility

  if option.debug > 0 then
    print("installing MBH in Q${mbn}  IR${irn} in the ARC${ira}${irb}")
  end

  abh_a${irn}${irb}=\ ab_a${irn}${irb}/2; kbh_a${irn}${irb}=\ abh_a${irn}${irb}/l_mbh
  abh_a${ira}${irn}=\ ab_a${ira}${irn}/2; kbh_a${ira}${irn}=\ abh_a${ira}${irn}/l_mbh

  !tolerances from DS MB Q13-Q7
  mbh_shift=-(l_mbh/ab_a78*2*(1/cos(ab_a78/4)-1)+(0.7225*0.0051/4))
  g_mbh=0.017150
  r_mbh=0.022
  r_tol_mbh=0.0009
  h_tol_mbh=0.0008
  v_tol_mbh=0.0005

  if ${irn} == 7 then
    mech_sep_mbh_l${irn}b1=\  0.194+mbh_shift*2
    mech_sep_mbh_r${irn}b1=\  0.194+mbh_shift*2
    mech_sep_mbh_l${irn}b2=\ -0.194+mbh_shift*2
    mech_sep_mbh_r${irn}b2=\ -0.194+mbh_shift*2
  end

  if ${irn} == 2 then
    mech_sep_mbh_l${irn}b1=\  0.194+mbh_shift*2
    mech_sep_mbh_r${irn}b1=\ -0.194+mbh_shift*2
    mech_sep_mbh_l${irn}b2=\ -0.194+mbh_shift*2
    mech_sep_mbh_r${irn}b2=\  0.194+mbh_shift*2
  end

  if ${irn} == 1 or ${irn} == 5 then
    mech_sep_mbh_l${irn}b1=\ -0.194+mbh_shift*2
    mech_sep_mbh_r${irn}b1=\  0.194+mbh_shift*2
    mech_sep_mbh_l${irn}b2=\  0.194+mbh_shift*2
    mech_sep_mbh_r${irn}b2=\ -0.194+mbh_shift*2
  end

  mbh_a${mbn}r${irn}_b1 = mbh ('MBH.A${mbn}R${irn}.B1', { angle:= abh_a${irn}${irb}, k0:= kbh_a${irn}${irb}, polarity=+1, mech_sep:=mech_sep_mbh_r${irn}b1 })
  mbh_b${mbn}r${irn}_b1 = mbh ('MBH.B${mbn}R${irn}.B1', { angle:= abh_a${irn}${irb}, k0:= kbh_a${irn}${irb}, polarity=+1, mech_sep:=mech_sep_mbh_r${irn}b1 })
  mbh_a${mbn}l${irn}_b2 = mbh ('MBH.A${mbn}L${irn}.B2', { angle:=-abh_a${ira}${irn}, k0:=-kbh_a${ira}${irn}, polarity=+1, mech_sep:=mech_sep_mbh_l${irn}b2 })
  mbh_b${mbn}l${irn}_b2 = mbh ('MBH.B${mbn}L${irn}.B2', { angle:=-abh_a${ira}${irn}, k0:=-kbh_a${ira}${irn}, polarity=+1, mech_sep:=mech_sep_mbh_l${irn}b2 })
  mbh_a${mbn}r${irn}_b2 = mbh ('MBH.A${mbn}R${irn}.B2', { angle:=-abh_a${irn}${irb}, k0:=-kbh_a${irn}${irb}, polarity=+1, mech_sep:=mech_sep_mbh_r${irn}b2 })
  mbh_b${mbn}r${irn}_b2 = mbh ('MBH.B${mbn}R${irn}.B2', { angle:=-abh_a${irn}${irb}, k0:=-kbh_a${irn}${irb}, polarity=+1, mech_sep:=mech_sep_mbh_r${irn}b2 })
  mbh_a${mbn}l${irn}_b1 = mbh ('MBH.A${mbn}L${irn}.B1', { angle:= abh_a${ira}${irn}, k0:= kbh_a${ira}${irn}, polarity=+1, mech_sep:=mech_sep_mbh_l${irn}b1 })
  mbh_b${mbn}l${irn}_b1 = mbh ('MBH.B${mbn}L${irn}.B1', { angle:= abh_a${ira}${irn}, k0:= kbh_a${ira}${irn}, polarity=+1, mech_sep:=mech_sep_mbh_l${irn}b1 })

  -- value,mbh_hsag,g_mbh,r_mbh;

  mbh_a${mbn}r${irn}_b1 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }
  mbh_b${mbn}r${irn}_b1 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }
  mbh_a${mbn}l${irn}_b2 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }
  mbh_b${mbn}l${irn}_b2 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }
  mbh_a${mbn}r${irn}_b2 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }
  mbh_b${mbn}r${irn}_b2 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }
  mbh_a${mbn}l${irn}_b1 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }
  mbh_b${mbn}l${irn}_b1 :setvar { aperture:={kind='rectellipse', r_mbh,g_mbh,r_mbh,r_mbh, tol={r_tol_mbh,h_tol_mbh,v_tol_mbh}} }

  tcld_${mbn}r${irn}_b1  = tcld ('TCLD.${mbn}R${irn}.B1' , {  })
  tcld_${mbn}l${irn}_b2  = tcld ('TCLD.${mbn}L${irn}.B2' , {  })
  vtcld_${mbn}l${irn}_b1 = tcld ('VTCLD.${mbn}L${irn}.B1', {  })
  vtcld_${mbn}r${irn}_b2 = tcld ('VTCLD.${mbn}R${irn}.B2', {  })

  s_tcld_${mbn}r${irn}_b1 = marker ('S.TCLD.${mbn}R${irn}.B1', {  })
  s_tcld_${mbn}l${irn}_b2 = marker ('S.TCLD.${mbn}L${irn}.B2', {  })
  e_tcld_${mbn}r${irn}_b1 = marker ('E.TCLD.${mbn}R${irn}.B1', {  })
  e_tcld_${mbn}l${irn}_b2 = marker ('E.TCLD.${mbn}L${irn}.B2', {  })

!  -- reuse of at of MBs! Kept for MAD-X compilance.
  pos_mbr = mb_${mbm}${mbn}r${irn}_b1.at
  pos_mbl = mb_${mbm}${mbn}l${irn}_b1.at
! -- alternate way to re-calculate the mb_xxx, at=rel_pos, from=ip${irn}
! pos_ip  = lhcb1:upos(lhcb1:index_of"IP${irn}")
! pos_mbr = lhcb1:upos(lhcb1:index_of(mb_${mbm}${mbn}r${irn}_b1.name)) - pos_ip
! pos_mbl = lhcb1:upos(lhcb1:index_of(mb_${mbm}${mbn}l${irn}_b1.name)) - pos_ip
! print("${irn}", pos_mbr, pos_mbl)

-- value, pos_mbr, pos_mbl;

  if bv_aux == 1 then
    local lst = {'MB.${mbm}${mbn}R${irn}.B1', 'MB.${mbm}${mbn}L${irn}.B1'}
    if mbh_rm_mcs == 1 then
      lst = tblcat(lst,{'MCS.${mbm}${mbn}R${irn}.B1', 'MCS.${mbm}${mbn}L${irn}.B1'})
    end
    if mbh_rm_mcdo == 1 then
      lst = tblcat(lst,
      {'MCO.${mbn}L${irn}.B1', 'MCO.${mbn}R${irn}.B1', 'MCO.${mbn}L${irn}.B1', 'MCO.${mbn}R${irn}.B1',
       'MCD.${mbn}L${irn}.B1', 'MCD.${mbn}R${irn}.B1', 'MCD.${mbn}L${irn}.B1', 'MCD.${mbn}R${irn}.B1',})
    end
    lst = tblcat(lst,{'MBH.A${mbn}R${irn}.B1',   'MBH.A${mbn}L${irn}.B1', 'S.TCLD.${mbn}R${irn}.B1',
                      'TCLD.${mbn}R${irn}.B1', 'E.TCLD.${mbn}R${irn}.B1',   'MBH.B${mbn}R${irn}.B1',
                      'MBH.B${mbn}L${irn}.B1',  'VTCLD.${mbn}R${irn}.B1'})

    lhcb1:deselect()
    for _,e in ipairs(lst) do
      if lhcb1[e] then lhcb1[e]:select() end
    end
    lhcb1:remove{flag=selected}

    lhcb1:install {
      MADX['MBH.A${mbn}L${irn}.B1'  ] :setvar { at=pos_mbl-4.454, from='IP${irn}' },
      MADX['VTCLD.${mbn}L${irn}.B1' ] :setvar { at=pos_mbl      , from='IP${irn}' }, ! BUG: not in SLHC?
      MADX['MBH.B${mbn}L${irn}.B1'  ] :setvar { at=pos_mbl+4.454, from='IP${irn}' },
      MADX['MBH.A${mbn}R${irn}.B1'  ] :setvar { at=pos_mbr-4.454, from='IP${irn}' },
      MADX['S.TCLD.${mbn}R${irn}.B1'] :setvar { at=pos_mbr-0.5  , from='IP${irn}' },
      MADX['TCLD.${mbn}R${irn}.B1'  ] :setvar { at=pos_mbr+5e-12, from='IP${irn}' }, ! CHK: position
      MADX['E.TCLD.${mbn}R${irn}.B1'] :setvar { at=pos_mbr+0.5  , from='IP${irn}' },
      MADX['MBH.B${mbn}R${irn}.B1'  ] :setvar { at=pos_mbr+4.454, from='IP${irn}' },
    }
  end

!  -- reuse of at of MBs! Kept for MAD-X compilance.
  pos_mbl=mb_${mbm}${mbn}l${irn}_b2.at
  pos_mbr=mb_${mbm}${mbn}r${irn}_b2.at
! -- alternate way to re-calculate the mb_xxx, at=rel_pos, from=ip${irn}
! pos_ip  = lhcb2:upos(lhcb2:index_of"IP${irn}")
! pos_mbr = lhcb2:upos(lhcb2:index_of(mb_${mbm}${mbn}r${irn}_b2.name)) - pos_ip
! pos_mbl = lhcb2:upos(lhcb2:index_of(mb_${mbm}${mbn}l${irn}_b2.name)) - pos_ip
! print("${irn}", pos_mbr, pos_mbl)

  local lst = {'MB.${mbm}${mbn}R${irn}.B2', 'MB.${mbm}${mbn}L${irn}.B2'}

  if __${mbm}bm > 0 then
    lst = tblcat(lst, {'MCS.${mbm}${mbn}R${irn}.B2', 'MCS.${mbm}${mbn}L${irn}.B2'})
  end
  if __${mbm}bm == 1 then
    lst = tblcat(lst, {'MCO.${mbn}L${irn}.B2', 'MCO.${mbn}R${irn}.B2', 'MCO.${mbn}L${irn}.B2',
                       'MCO.${mbn}R${irn}.B2', 'MCD.${mbn}L${irn}.B2', 'MCD.${mbn}R${irn}.B2',
                       'MCD.${mbn}L${irn}.B2', 'MCD.${mbn}R${irn}.B2'})
  end
  lst = tblcat(lst,{  'MBH.A${mbn}L${irn}.B2',   'MBH.A${mbn}R${irn}.B2', 'S.TCLD.${mbn}L${irn}.B2',
                    'S.TCLD.${mbn}R${irn}.B2',   'TCLD.${mbn}L${irn}.B2',   'TCLD.${mbn}R${irn}.B2',
                    'E.TCLD.${mbn}L${irn}.B2', 'E.TCLD.${mbn}R${irn}.B2',   'MBH.B${mbn}L${irn}.B2',
                      'MBH.B${mbn}R${irn}.B2',  'VTCLD.${mbn}R${irn}.B2' })
  lhcb2:deselect()
  for _,e in ipairs(lst) do
    if lhcb2[e] then lhcb2[e]:select() end
  end
  lhcb2:remove{flag=selected}

  lhcb2:install {
    MADX['MBH.A${mbn}L${irn}.B2'  ] :setvar { at=pos_mbl-bv_aux*4.454, from='IP${irn}' },
    MADX['S.TCLD.${mbn}L${irn}.B2'] :setvar { at=pos_mbl-bv_aux*0.5  , from='IP${irn}' },
    MADX['TCLD.${mbn}L${irn}.B2'  ] :setvar { at=pos_mbl+bv_aux*5e-12, from='IP${irn}' }, ! CHK: position
    MADX['E.TCLD.${mbn}L${irn}.B2'] :setvar { at=pos_mbl+bv_aux*0.5  , from='IP${irn}' },
    MADX['MBH.B${mbn}L${irn}.B2'  ] :setvar { at=pos_mbl+bv_aux*4.454, from='IP${irn}' },
    MADX['MBH.A${mbn}R${irn}.B2'  ] :setvar { at=pos_mbr-bv_aux*4.454, from='IP${irn}' },
    MADX['VTCLD.${mbn}R${irn}.B2' ] :setvar { at=pos_mbr             , from='IP${irn}' },
    MADX['MBH.B${mbn}R${irn}.B2'  ] :setvar { at=pos_mbr+bv_aux*4.454, from='IP${irn}' },
  }

  !show,mbh_a${mbn}r${irn}_b1;
  !show,mbh_a${mbn}l${irn}_b2;
]=]

local function install_mbh (mbm,mbn,irn,ira,irb)
  local s = install_mbh_macro % {mbm=mbm,mbn=mbn,irn=irn,ira=ira,irb=irb}
--  print(s) -- to debug the string interpolation
  local f = assert(_G.loadstring(s)) ; _G.setfenv(f, MADX) ; f()
end

if mbh_ir1q8   >0 then install_mbh('B',8 ,1,8,2) end
if mbh_ir1q9   >0 then install_mbh('B',9 ,1,8,2) end
if mbh_ir1q10  >0 then install_mbh('B',10,1,8,2) end

if mbh_ir2q8   >0 then install_mbh('A',8 ,2,1,3) end
if mbh_ir2q10  >0 then install_mbh('A',10,2,1,3) end

if mbh_ir5q8   >0 then install_mbh('B',8 ,5,4,6) end
if mbh_ir5q9   >0 then install_mbh('B',9 ,5,4,6) end
if mbh_ir5q10  >0 then install_mbh('B',10,5,4,6) end

if mbh_ir7q8   >0 then install_mbh('B',8 ,7,6,8) end
if mbh_ir7q10  >0 then install_mbh('B',10,7,6,8) end

if mbh_ir7q8a  >0 then install_mbh('A',8 ,7,6,8) end
if mbh_ir7q8b  >0 then install_mbh('B',8 ,7,6,8) end
if mbh_ir7q9a  >0 then install_mbh('A',9 ,7,6,8) end
if mbh_ir7q9b  >0 then install_mbh('B',9 ,7,6,8) end
if mbh_ir7q10a >0 then install_mbh('A',10,7,6,8) end
if mbh_ir7q10b >0 then install_mbh('B',10,7,6,8) end

!end slhc/toolkit/install_mbh.madx

!set default lag for cavities

lagrf400_b1=0.5
lagrf400_b2=0.

!-----
!IR7 MQW
!-----

if bv_aux ==1 then
  rem_ins(lhcb1, {'MQWA.C5L7.B1', 'MQWA.D5L7.B1', 'MQWA.E5L7.B1', 'MQWB.5L7.B1',
                  'MQWA.C5R7.B1', 'MQWA.D5R7.B1', 'MQWA.E5R7.B1', 'MQWB.5R7.B1'},
                 { MADX['MQWA.C5L7.B1'] :setvar { at=-130.966, from='IP7'},
                   MADX['MQWA.D5L7.B1'] :setvar { at=-134.766, from='IP7'},
                   MADX['MQWA.E5L7.B1'] :setvar { at=-138.566, from='IP7'},
                   MADX['MQWA.C5R7.B1'] :setvar { at= 130.966, from='IP7'},
                   MADX['MQWA.D5R7.B1'] :setvar { at= 134.766, from='IP7'},
                   MADX['MQWA.E5R7.B1'] :setvar { at= 138.566, from='IP7'}})
end
rem_ins(lhcb2, {'MQWA.C5L7.B2', 'MQWA.D5L7.B2', 'MQWA.E5L7.B2', 'MQWB.5L7.B2',
                'MQWA.C5R7.B2', 'MQWA.D5R7.B2', 'MQWA.E5R7.B2', 'MQWB.5R7.B2'},
               { MADX['MQWA.C5L7.B2'] :setvar { at=-130.966*bv_aux, from='IP7'},
                 MADX['MQWA.D5L7.B2'] :setvar { at=-134.766*bv_aux, from='IP7'},
                 MADX['MQWA.E5L7.B2'] :setvar { at=-138.566*bv_aux, from='IP7'},
                 MADX['MQWA.C5R7.B2'] :setvar { at= 130.966*bv_aux, from='IP7'},
                 MADX['MQWA.D5R7.B2'] :setvar { at= 134.766*bv_aux, from='IP7'},
                 MADX['MQWA.E5R7.B2'] :setvar { at= 138.566*bv_aux, from='IP7'}})

!-----
!IR2 TCLD, TDIS
!-----

if option.debug > 0 then
  print("*** SLHC SECTION: IR2 TCLD, TDIS")
end

! https:--indico.cern.ch/event/680374/9/12/2017
! https:--indico.cern.ch/event/680374/contributions/2787337/attachments/1570745/2477819/ICL_Meeting_-_11TTCLD_-_CCTCLD_v.3.pptx

postcld_2=425.71735
-- value,posTCLD.2;

tcld_11r2_b1 = tcld 'TCLD.11R2.B1' {  }
tcld_11l2_b2 = tcld 'TCLD.11L2.B2' {  }

if bv_aux ==1 then
  rem_ins(lhcb1, { 'TCLD.11R2.B1', 'LECL.11R2.B1' },
                 { MADX['TCLD.11R2.B1'] :setvar {at=posTCLD_2, from='IP2'} })
end
rem_ins(lhcb2, { 'TCLD.11L2.B2', 'LEBR.11L2.B2' },
               { MADX['TCLD.11L2.B2'] :setvar {at=-posTCLD_2*bv_aux, from='IP2'} }
        )

l_tdis               = 5.74
postdis = 78.293+l_tdis/2
tdis = collimator 'TDIS'  { l := l_tdis }
tdis_4l2_b1 = tdis 'TDIS.4L2.B1' {  }
tdis_4r8_b2 = tdis 'TDIS.4R8.B2' {  }


-- value,posTDIS;

if bv_aux ==1 then
  rem_ins(lhcb1, { 'TDI.4L2.B1', 'TDIS.4L2.B1' },
                 { MADX['TDIS.4L2.B1'] :setvar {at=-posTDIS, from='IP2'} })
end
rem_ins(lhcb2, { 'TDI.4R8.B2', 'TDIS.4R8.B2' },
               { MADX['TDIS.4R8.B2'] :setvar {at=posTDIS*bv_aux, from='IP8'} })

!-----
!IR8 TANB
!https:--edms.cern.ch/ui/file/1970117/0.1/LHC-TANB-EC-0001-0-1.pdf
!-----

if option.debug > 0 then
  print("*** SLHC SECTION: IR8, TANB")
end

l_tanb=0.605
postanb=119.4855
posbpmwb_8=114.8305
tanb = collimator 'TANB'   { l := l_tanb }

-- TANB.4L8.B1: TANB; TANB.4L8.B1: TANB;
-- TANB.4R8.B2: TANB; TANB.4R8.B2: TANB;

tanb_4l8_b1 = tanb 'TANB.4L8.B1' {  }  -- element created twice in the original
tanb_4r8_b1 = tanb 'TANB.4R8.B1' {  }
tanb_4l8_b2 = tanb 'TANB.4L8.B2' {  }
tanb_4r8_b2 = tanb 'TANB.4R8.B2' {  }  -- element created twice in the original

-- value,posTANB;

if bv_aux ==1 then
  rem_ins(lhcb1, { 'TANB.4L8.B1', 'TANB.4R8.B1', 'BPMWB.4L8.B1', 'BPMWB.4R8.B1' },
                 { MADX['TANB.4L8.B1' ] :setvar {at=-posTANB   , from='IP8'},
--                 MADX['TANB.4R8.B1' ] :setvar {at= posTANB   , from='IP8'}, -- BUG: not in SLHC?
                   MADX['BPMWB.4L8.B1'] :setvar {at=-posBPMWB_8, from='IP8'},
                   MADX['BPMWB.4R8.B1'] :setvar {at= posBPMWB_8, from='IP8'}, })
end
rem_ins(lhcb2, { 'TANB.4L8.B2', 'TANB.4R8.B2', 'BPMWB.4L8.B2', 'BPMWI.4R8.B2' },
                 { -- MADX['TANB.4L8.B2' ]:setvar{at=-posTANB*bv_aux   , from='IP8'}, -- BUG: not in SLHC?
                   MADX['TANB.4R8.B2' ] :setvar {at= posTANB*bv_aux   , from='IP8'},
                   MADX['BPMWB.4L8.B2'] :setvar {at=-posBPMWB_8*bv_aux, from='IP8'},
                   MADX['BPMWI.4R8.B2'] :setvar {at= posBPMWB_8*bv_aux, from='IP8'}, })

!-----
!IR4 BGV, BSRT
!-----

if option.debug > 0 then
  print("*** SLHC SECTION: IR4 BGV, BSRT")
end

posbgv = 200
posbsrtd4 = 117.114

-- BGV.7L4.B2: marker; BGV.7R4.B1: marker;
-- BSRTD4.5L4.B1: marker; BSRTD4.5R4.B2: marker;

bgv_7l4_b2 = marker 'BGV.7L4.B2' {  }
bgv_7r4_b1 = marker 'BGV.7R4.B1' {  }

bsrtd4_5l4_b1 = marker 'BSRTD4.5L4.B1' {  }
bsrtd4_5r4_b2 = marker 'BSRTD4.5R4.B2' {  }

if bv_aux ==1 then
  rem_ins(lhcb1, { 'BGV.7R4.B1', 'BSRTD4.5L4.B1' },
                 { MADX['BGV.7R4.B1'   ] :setvar {at=posBGV    , from='IP4'},
                   MADX['BSRTD4.5L4.B1'] :setvar {at=-posBSRTD4, from='IP4'} })
end
rem_ins(lhcb2, { 'BGV.7L4.B2', 'BSRTD4.5R4.B2' },
               { MADX['BGV.7L4.B2'   ] :setvar {at=-posBGV*bv_aux, from='IP4'},
                 MADX['BSRTD4.5R4.B2'] :setvar {at=posBSRTD4     , from='IP4'} })

elens_5l4_b1 = marker 'ELENS.5L4.B1' {  }
elens_5l4_b2 = marker 'ELENS.5L4.B2' {  }
elens_5r4_b1 = marker 'ELENS.5R4.B1' {  }
elens_5r4_b2 = marker 'ELENS.5R4.B2' {  }

if bv_aux ==1 then
  rem_ins(lhcb1, { 'ELENS.5L4.B1', 'ELENS.5R4.B1' },
                 { MADX['ELENS.5L4.B1'] :setvar {at=-40, from='IP4'},
                   MADX['ELENS.5R4.B1'] :setvar {at= 40, from='IP4'} })
end
rem_ins(lhcb2, { 'ELENS.5L4.B2', 'ELENS.5R4.B2' },
               { MADX['ELENS.5L4.B2'] :setvar {at=-40*bv_aux, from='IP4'},
                 MADX['ELENS.5R4.B2'] :setvar {at= 40*bv_aux, from='IP4'} })

