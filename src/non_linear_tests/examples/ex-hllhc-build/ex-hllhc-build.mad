-- time ../mad -jp=vl hllhc-build.mad > hllhc-build.out 2>&1

--[[
To convert MADX saved sequence for comparison:
../mad -e 'MADX:load"output/lhcb1.madx" ; MADX.lhcb1 :dumpseq"output/lhcb1.madx"'
../mad -e 'MADX:load"output/lhcb2.madx" ; MADX.lhcb2 :dumpseq"output/lhcb2.madx"'
../mad -e 'MADX:load"output/slhcb1.madx"; MADX.slhcb1:dumpseq"output/slhcb1.madx"'
../mad -e 'MADX:load"output/slhcb2.madx"; MADX.slhcb2:dumpseq"output/slhcb2.madx"'
--]]

local doplot = 'pdf' ! false | true | 'pdf'

-----

local filesys in MAD
os.execute("rm -rf temp")
filesys.mkdir("temp")
filesys.mkdir("input")
filesys.mkdir("output")
filesys.link("lhc-optics/slhc", "slhc", true)
filesys.link("lhc-optics/lhc" , "lhc" , true)

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
--  PLOT Utility
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;

local assertf, atexit, pause in  MAD.utility
if doplot == true then atexit(pause, true) end
local dopdf = doplot == 'pdf' ; doplot = not not doplot

local function plottw (mtbl, x1y2_)
  if not doplot then return end
  MAD.plot { table=mtbl, sequence=mtbl.__seq, name=mtbl.title,
             x1y1 = { s={'beta11','beta22'} },
             x1y2 = { s= x1y2_ or {'mu1','mu2'} },
             styles = 'lines',
             output = dopdf and 'madplot.pdf' or nil,
           }
end

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
--  LOAD LHC
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;

local function SLHC_load (nrj, optics)
  local beam in MAD
  local is_sequence in MAD.typeid

  if not is_sequence(MADX:var_get'lhcb1') then -- avoid MADX warning
    -- load sequence
    MADX:load('input/slhc_unset_vars.mad') -- handmade, cleaner than disabling warnings...
    MADX:load('lhc/lhc.seq', 'input/lhc.mad', true) -- convert and save on need

    -- sanity checks
    local lhcb1, lhcb2 in MADX
    local n1, n2 = #lhcb1, #lhcb2
    assertf(n1 == 6677, "invalid number of elements %d in LHCB1 (6677 expected)", n1)
    assertf(n2 == 6676, "invalid number of elements %d in LHCB2 (6676 expected)", n2)

    -- attach beam
    lhcb1.beam = beam { particle='proton', energy=nrj }
    lhcb2.beam = lhcb1.beam

    -- set sequences directions
    lhcb1.dir =  1
    lhcb2.dir = -1

    -- dump LHC
    lhcb1:dumpseq("output/lhcb1")
    lhcb2:dumpseq("output/lhcb2")

    -- SLHC beam 1 & 2 or 4
    MADX.mylhcbeam = 0

    -- build SLHC from LHC
    local option in MAD
    local dbg = option.debug ; option.debug = 1
    MADX:load('input/hllhc_build_seq.mad')
    option.debug = dbg

    -- (re)load SLHC from MADX
    local lhcb1, lhcb2, bv_aux in MADX
    local n1, n2 = #lhcb1, #lhcb2

    -- attach beam
    lhcb1.beam = beam { particle='proton', energy=nrj }
    lhcb2.beam = lhcb1.beam

    -- set sequences directions
    lhcb1.dir = 1
    lhcb2.dir = -bv_aux

    -- dump SLHC + sanity checks
    if bv_aux == 1 then
      lhcb1:dumpseq("output/slhcb1")
      lhcb2:dumpseq("output/slhcb2")
      assertf(n1 == 6719, "invalid number of elements %d in SLHCB1 (6719 expected)", n1)
      assertf(n2 == 6721, "invalid number of elements %d in SLHCB2 (6721 expected)", n2)
    else
      lhcb2:dumpseq("output/slhcb4")
      assertf(n2 == 6721, "invalid number of elements %d in SLHCB4 (6721 expected)", n2)
    end
  end
end

local function SLHC_optic(name)
  MADX:load("slhc/round/"..name..".madx", "input/"..name..".mad")
end

local function check_IP(bim)
  local twiss   in MAD
  local printf  in MAD.utility
  local observe in MAD.element.flags
  local seq = bim == 'b2' and MADX.lhcb2 or MADX.lhcb1

  local obspts = {"$start", "IP1", "IP5", "IP2", "IP8", "$end"}
  seq:deselect{flag=observe}
  for _,e in ipairs(obspts) do seq[e]:select(observe) end

  local nam = 'S'..seq.name
  local t = twiss { sequence=seq, method=4, observe=0, chrom=true, title=nam }
  t:write("output/twiss"..nam)

  plottw(t)

  printf('refbetxip1%s = %.15g\nrefbetyip1%s = %.15g\n', bim,t.IP1.beta11,bim,t.IP1.beta22)
  printf('refbetxip5%s = %.15g\nrefbetyip5%s = %.15g\n', bim,t.IP5.beta11,bim,t.IP5.beta22)
  printf('refbetxip2%s = %.15g\nrefbetyip2%s = %.15g\n', bim,t.IP2.beta11,bim,t.IP2.beta22)
  printf('refbetxip8%s = %.15g\nrefbetyip8%s = %.15g\n', bim,t.IP8.beta11,bim,t.IP8.beta22)

  printf('refqx%s  = %.15g\nrefqy%s  = %.15g\n', bim,t.q1 ,bim,t.q2 )
  printf('refdqx%s = %.15g\nrefdqy%s = %.15g\n', bim,t.dq1,bim,t.dq2)

  printf('refxip1%s = %.15g\nrefyip1%s = %.15g\n', bim,t.IP1.x,bim,t.IP1.y)
  printf('refxip5%s = %.15g\nrefyip5%s = %.15g\n', bim,t.IP5.x,bim,t.IP5.y)
  printf('refxip2%s = %.15g\nrefyip2%s = %.15g\n', bim,t.IP2.x,bim,t.IP2.y)
  printf('refxip8%s = %.15g\nrefyip8%s = %.15g\n', bim,t.IP8.x,bim,t.IP8.y)

  printf('refpxip1%s = %.15g\nrefpyip1%s = %.15g\n', bim,t.IP1.px,bim,t.IP1.py)
  printf('refpxip5%s = %.15g\nrefpyip5%s = %.15g\n', bim,t.IP5.px,bim,t.IP5.py)
  printf('refpxip2%s = %.15g\nrefpyip2%s = %.15g\n', bim,t.IP2.px,bim,t.IP2.py)
  printf('refpxip8%s = %.15g\nrefpyip8%s = %.15g\n', bim,t.IP8.px,bim,t.IP8.py)
end

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
--  SCRIPT
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;

print "SLHC_load"    ; SLHC_load (7000)
print "SLHC_optic"   ; SLHC_optic "opt_round_150_1500"
print "check_IP(B1)" ; check_IP   'b1'
print "check_IP(B2)" ; check_IP   'b2'

