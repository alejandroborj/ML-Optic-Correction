mkdir: cannot create directory ‘/afs/cern.ch/user/a/aborjess/work/public/ML-Optic-Correction/src/non_linear_tests/supervised_learning/htcondor_dataset’: File exists
***pymad.recv: binary data 4 bytes
***pymad.recv: [io.stdout:setvbuf('line')
    py:send(1)] 40 bytes
***pymad.send: [int_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [element = MAD.element
sequence = MAD.sequence
mtable = MAD.mtable
twiss = MAD.twiss
beta0 = MAD.beta0
beam = MAD.beam
survey = MAD.survey
object = MAD.object
track = MAD.track
match = MAD.match
] 194 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [py:__err(true):send(MAD):__err(false)] 37 bytes
***pymad.send: [ref_] 4 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [py:__err(true):send(MAD['env']):__err(false)] 44 bytes
***pymad.send: [ref_] 4 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [py:__err(true):send(MAD['env']['version']):__err(false)] 55 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [0.9.7] 5 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
function __mklast__ (a, b, ...)
  if type(b) == "nil" then return a
  else                     return {a, b, ...}
  end
end
_last = {}
  ] 138 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [beam = MAD.beam
track = MAD.track
twiss = MAD.twiss
match = MAD.match
damap = MAD.damap
option = MAD.option
] 108 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [normal = MAD.gphys.normal
] 26 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [real = MAD.gmath.real
imag = MAD.gmath.imag
abs = MAD.gmath.abs
] 64 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [tblcat = MAD.utility.tblcat
printf = MAD.utility.printf
] 56 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [observed = MAD.element.flags.observed
] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
    sample_id = 0
    sample_seed = 9543498
    dataset_name = 'htcondor_dataset/job_0'
    ] 93 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
    -- track and twiss columns
    tkcols = {'name','s','l','x','px','y','py'}
    twcols = {'name','s','beta11','beta22','mu1','mu2','dx','dy','x','y'}

    -- flag to run twiss checks
    twiss_check = 0 -- 1 do checks

    -------------------------------------------------------------------------------o
    -- load LHCB1 and LHCB2                                                      --o
    -------------------------------------------------------------------------------o

    MADX:load("./lhc_data/lhcb1_saved.seq", "./lhc_data/lhcb1_saved.mad") -- convert on need
    !MADX:load("./lhc_data/lhcb2_saved.seq", "./lhc_data/lhcb2_saved.mad") -- convert on need
    MADX:load("lhc_vars0.mad")                      -- avoid warnings
    ] 740 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [lhcb1 = MADX.lhcb1
] 19 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
    !local lhcb1 in MADX !, lhcb2

    !lhcb2.dir  = -1 -- lhcb2 is reversed, i.e. bv_flag = -1

    -------------------------------------------------------------------------------o
    -- preliminaries                                                             --o
    -------------------------------------------------------------------------------o

    -- need to create a "new" proton for MAD-X compatibility (old pmass?)
    lhc_beam = beam {particle="xproton", charge=1, mass=0.938272046, energy=450}

    for _,lhc in ipairs{lhcb1} do!,lhcb2
    -- attach beam to sequence
    lhc.beam = lhc_beam

    -- select observed elements for twiss
    lhc:deselect(observed)
    lhc:  select(observed, {pattern="BPM"})
    lhc:  select(observed, {pattern="IP" })
    end

    -------------------------------------------------------------------------------o
    -- twiss checks (optional)                                                   --o
    -------------------------------------------------------------------------------o

    function prt_qs (seq, tw)
    printf("% 5s:  q1 = % -.6f,  q2 = % -.6f\n", seq.name, tw. q1, tw. q2)
    printf("      dq1 = % -.6f, dq2 = % -.6f\n",           tw.dq1, tw.dq2)
    end

    if twiss_check ~= 0 then

    tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
    !local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}


    prt_qs(lhcb1, tw1) ; tw1:write("twiss_b1_n.tfs", twcols)
    !prt_qs(lhcb2, tw2) ; tw2:write("twiss_b2_n.tfs", twcols)

    -- if twiss_check < 0 then os.exit() end
    end
    py:send('Error Generation')
    ] 1602 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [Error Generation] 16 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
      
      lhc = MADX['lhc'..'b1']
             
      error_file = assert(io.open(string.format("./%s/errors/error_%d_seed_%d.csv", dataset_name, sample_id, sample_seed), "w"))
      error_file:write("NAME\tK2L\tK2SL\tK3L\tK3SL\n")
      ] 242 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-4.193244328553623e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.7452176769863644e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.5443908140976812e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*4.192185528105795e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R1"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R1 L:6.370000 K2L:4.832294E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*2.3626518065436636e-06*k_ref*element.l/0.017
          local k2sl_err = 2*2.3728830876217857e-07*ks_ref*element.l/0.017
          local k3l_err = 6*3.2845571334113514e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-3.2889509152880582e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R1"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R1 L:5.500000 K2L:3.291859E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-7.795431699327628e-08*k_ref*element.l/0.017
          local k2sl_err = 2*-2.169311130684261e-07*ks_ref*element.l/0.017
          local k3l_err = 6*2.9124052232889444e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*1.203602960193223e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R1"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R1 L:5.500000 K2L:-1.204667E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*3.775823218661377e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.852686368311754e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.0193192037514902e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-7.188714700812855e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R1"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R1 L:6.370000 K2L:-8.345099E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-4.620496829687363e-06*k_ref*element.l/0.017
          local k2sl_err = 2*4.297722782405889e-06*ks_ref*element.l/0.017
          local k3l_err = 6*1.4227924027691342e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.1223952500297848e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L2"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L2 L:6.370000 K2L:2.464374E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*7.429767808989868e-07*k_ref*element.l/0.017
          local k2sl_err = 2*-2.5345274562276343e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-4.482758077691035e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*5.479746706843969e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L2"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L2 L:5.500000 K2L:-5.493689E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-9.323373275994347e-07*k_ref*element.l/0.017
          local k2sl_err = 2*-1.015499079711366e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-8.536169666048303e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.811554668223005e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L2"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L2 L:5.500000 K2L:-2.818708E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*2.3041455863297496e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-1.2316109563257887e-06*ks_ref*element.l/0.017
          local k3l_err = 6*5.81389854858556e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-2.2986906210348146e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L2"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L2 L:6.370000 K2L:-2.669075E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*9.693684510594105e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.2818691129450399e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-3.571443607226895e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*6.373775172819527e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R2"}

        ] 984 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R2 L:6.370000 K2L:-7.400772E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-1.02257980106857e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-1.6699126202183784e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-4.6656089068962695e-23*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*1.2185679057741727e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R2"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R2 L:5.500000 K2L:1.221668E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-5.189063128971459e-07*k_ref*element.l/0.017
          local k2sl_err = 2*2.291342468576242e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.2328246642846763e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-6.739981449909626e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R2"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R2 L:5.500000 K2L:-6.757130E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-1.380677362313585e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.0679670875489027e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-3.498189090749199e-09*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-1.2718042270362276e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R2"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R2 L:6.370000 K2L:1.476728E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-4.229679563787775e-06*k_ref*element.l/0.017
          local k2sl_err = 2*3.556646588024182e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-2.502259369236539e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.2232626013706258e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L5"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L5 L:6.370000 K2L:-2.580899E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-2.3608050076116835e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-8.24343602542071e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-0.0*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-5.720619681816232e-08*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L5"}

        ] 969 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L5 L:5.500000 K2L:-5.725677E-05] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-6.497505941499039e-07*k_ref*element.l/0.017
          local k2sl_err = 2*-6.481645999886311e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-2.1546011533242868e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*3.249551082293443e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L5"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L5 L:5.500000 K2L:3.252424E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-4.04923661831606e-06*k_ref*element.l/0.017
          local k2sl_err = 2*4.595108480342203e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.2816139725983786e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*5.056964481876134e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L5"}

        ] 984 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L5 L:6.370000 K2L:-5.829117E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-1.2590857918863666e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.6249687983816123e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-5.127570868144973e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-1.4080013563255386e-05*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R5"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R5 L:6.370000 K2L:-1.622990E-02] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*3.2443703333623195e-07*k_ref*element.l/0.017
          local k2sl_err = 2*1.490653916093301e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-6.054712745166779e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-1.2241908741661634e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R5"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R5 L:5.500000 K2L:1.225273E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*3.542371870318855e-07*k_ref*element.l/0.017
          local k2sl_err = 2*3.5551136523105805e-08*ks_ref*element.l/0.017
          local k3l_err = 6*-3.957715688820273e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-2.629346815244556e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R5"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R5 L:5.500000 K2L:2.631671E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-3.664338832102679e-06*k_ref*element.l/0.017
          local k2sl_err = 2*2.1856132756089365e-06*ks_ref*element.l/0.017
          local k3l_err = 6*7.135364538201997e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-6.878344035127685e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R5"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R5 L:6.370000 K2L:-7.984801E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*4.318562039107659e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-4.387430119009254e-06*ks_ref*element.l/0.017
          local k3l_err = 6*1.5001335632258948e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-2.8696904808004003e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L8"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L8 L:6.370000 K2L:-3.332079E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-1.5479946117554578e-06*k_ref*element.l/0.017
          local k2sl_err = 2*2.993999457302418e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-4.354011967739734e-23*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.0286317409413864e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L8"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L8 L:5.500000 K2L:-2.033793E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.784693184440226e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-2.7220646123788153e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-3.462890007057896e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-8.240569999942622e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L8"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L8 L:5.500000 K2L:8.261536E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-5.059274600709452e-07*k_ref*element.l/0.017
          local k2sl_err = 2*1.277166038595446e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.0808566806327826e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.256180250343935e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L8"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L8 L:6.370000 K2L:2.619715E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.9365108673747263e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-2.957335732829971e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-3.9686098361767833e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-4.980959098927956e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R8"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R8 L:6.370000 K2L:5.783534E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.2193509439097678e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-2.9648443909617266e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-3.617455043213421e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-7.605489478386178e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R8"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R8 L:5.500000 K2L:-7.624840E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.5193078166183332e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-1.214184436310783e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-3.0577230630914317e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*1.7704680790768782e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R8"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R8 L:5.500000 K2L:1.774973E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*7.709663200351163e-07*k_ref*element.l/0.017
          local k2sl_err = 2*6.017188343904845e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-1.11249356822683e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-1.375234349103766e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R8"}

        ] 983 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R8 L:6.370000 K2L:1.596824E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.0310889030304245e-08*k_ref*element.l/0.017
          local k2sl_err = 2*-3.1573763743760844e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-5.636647218882104e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*6.741064190082079e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L1"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L1 L:6.370000 K2L:-7.825439E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.2750421466430787e-06*k_ref*element.l/0.017
          local k2sl_err = 2*4.705938062736874e-07*ks_ref*element.l/0.017
          local k3l_err = 6*6.223014361839894e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.813272347615562e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L1"}

        ] 984 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L1 L:5.500000 K2L:2.815759E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.7044959183500164e-08*k_ref*element.l/0.017
          local k2sl_err = 2*1.3078232519501814e-06*ks_ref*element.l/0.017
          local k3l_err = 6*3.063164842027435e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-3.1236269636627626e-08*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L1"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L1 L:5.500000 K2L:-3.126388E-05] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-3.6848913019148436e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-2.1474456517943882e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.0653216471072753e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-9.50553090489528e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L1"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L1 L:6.370000 K2L:1.095694E-02] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
             
    error_file:close()
    -------------------------------------------------------------------------------o
    -- twiss checks (optional)                                                   --o
    -------------------------------------------------------------------------------o

    if twiss_check ~= 0 then

    tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
    !local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}

    prt_qs(lhcb1, tw1) ; tw1:write("twiss_phase_b1_n.tfs", twcols)
    !prt_qs(lhcb2, tw2) ; tw2:write("twiss_phase_b2_n.tfs", twcols)

    if twiss_check < 0 then os.exit() end
    end

    --[[ ref values
    LHCB1
    q1  = 62.27504896
    q2  = 60.29512787
    dq1 = 15.1778898
    dq2 = 15.21652238

    LHCB2
    q1  = 62.27115164
    q2  = 60.29725754
    dq1 = 15.15613102
    dq2 = 15.23680003
    --]]

    -------------------------------------------------------------------------------o
    -- match                                                                     --o
    -------------------------------------------------------------------------------o

    -- knobs families and sectors names
    local knam = {'all_lhc'}
    local snam = {'error_triplets'}    
    local gfs = {"011100","012000","100200","101100","102000","210000","300000","001300","003100","004000","021100","110200","022000","112000","130000","200200","201100","202000","400000","310000","001200","002100","003000","021000","110100","111000","200100","201000","011200","012100","031000","013000","100300","101200","102100","103000","120100","121000","210100","211000"}

    -- index of (IP,GNF)
    local idx_n = #gfs
    local idx_f = \i,j -> 2*((i-1)*idx_n+(j-1))

    -- loop over lhcb1 and lhcb2 ----------------
    for _,bn in ipairs{'b1'} do !,'b2'} do --

    !local lhc = MADX['lhc'..bn] -- current sequence

    io.write("*** Running ", lhc.name, " ***\n")

    -- BPM Names

    local bpm_names = {}

    for i,element in pairs(lhc.__dat) do !ipairs(tw1:getcol'name') do
    local name = element["name"]
    !print(type(name)==string)
    local typ = tostring(type(name))
    if typ~="nil" then
      if string.find(name, "BPM")~=nil then
        table.insert(bpm_names, name)
      end
    end
    end

    -- list of IPs and GNFs
    local obs_points = bpm_names
    obs_points[1] = 'IP1'

    ! First we need to cycle, for that we need a marker such as IP1, afterwards we track

    -- list of all knobs
    local kn = {}
    for _,ks in ipairs(knam) do
    for _,ss in ipairs(snam) do
    kn[#kn+1] = ks .. '_' .. ss .. bn -- knob names
    end end

    -- create phase space damap
    local X0 = damap{nv=6, np=#kn, mo=5, po=1,
                    vn=tblcat({'x','px','y','py','t','pt'}, kn)}


    -- compute RDTs
    local mthd = "trkrdt" -- trkrdt needs new release of MAD-NG
    local function get_nf(mthd)
    local nf, mth = {}, mthd or "trkrdt"

    if mth == "cycle" then       -- 1st method
      for i,obs_point in ipairs(obs_points) do
        io.write("** Tracking ", obs_point, "\n")
        lhc:cycle('$start')
        ! Cycling can only be done in marker points, not elements, such as IPs,
        ! end or arc markers (CHECK WHERE IS SHOULD CYCLE AND IF IT AFFECTS THE WHOLE LHC)
        local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
        nf[i] = normal(mflw[1]):analyse();
        !nf[i].a:write("A_"..obs_point.."_cycle")
      end

    elseif mth == "trkrdt" then  -- 2nd method
      io.write("** Tracking ", obs_points[1], "\n") !obs_points[1] must be a marker
      lhc:cycle(obs_points[1])

      local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
      local nf1 = normal(mflw[1]):analyse()

      io.write("** Tracking RDT\n")
      local X1 = nf1.a:real():set0(nf1.x0) ; X1.status = 'Aset'
      local mtbl, mflw = track{sequence=lhc, method=4, savemap=true, X0=X1,
                              range=obs_points[1].."/"..obs_points[#obs_points]}
      for i,obs_point in ipairs(obs_points) do
        nf[i] = nf1:analyse('gnf', mtbl[obs_point].__map)
        !nf[i].a:write("A_"..ip.."_trkrdt")
      end
    end

    return nf
    end

    -- run once for reference values
    local nf = get_nf(mthd)

    -- monomial strings for all knobs
    local ks, ki = {}, #kn
             
    for i=0,ki do ks[i] = nf[1]:getks(i) end

    local f = assert(io.open(string.format("./%s/samples/sample_%d_seed_%d_%s.csv",dataset_name, sample_id, sample_seed, bn), "w")) !Different csv for each beam
    
    !Writing column names
    f:write("NAME\t")    
    
    for j, rdt in ipairs(gfs) do
      f:write(string.format("RE_%s\tIM_%s\t", rdt, rdt))
    end
    f:write("\n")

    for i, obs_point in ipairs(obs_points) do
      f:write(string.format("%s\t", obs_point))
      for _,gf in ipairs(gfs) do
        local v = nf[i].gnf[gf..ks[0]]
        f:write(string.format("%12.4f\t%12.4f\t", real(v), imag(v)))
      end
      !End of row
      f:write("\n")
    end
    f:close()

    end -- loop over lhcb1 and lhcb2
             
    py:send('Finish')
    ] 5081 bytes
*** Running LHCB1 ***
** Tracking IP1
warning: undefined variable used (zero): lagrf400_b1
** Tracking RDT
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [Finish] 6 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [io.stdout:setvbuf('line')
    py:send(1)] 40 bytes
***pymad.send: [int_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [element = MAD.element
sequence = MAD.sequence
mtable = MAD.mtable
twiss = MAD.twiss
beta0 = MAD.beta0
beam = MAD.beam
survey = MAD.survey
object = MAD.object
track = MAD.track
match = MAD.match
] 194 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [py:__err(true):send(MAD):__err(false)] 37 bytes
***pymad.send: [ref_] 4 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [py:__err(true):send(MAD['env']):__err(false)] 44 bytes
***pymad.send: [ref_] 4 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [py:__err(true):send(MAD['env']['version']):__err(false)] 55 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [0.9.7] 5 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
function __mklast__ (a, b, ...)
  if type(b) == "nil" then return a
  else                     return {a, b, ...}
  end
end
_last = {}
  ] 138 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [beam = MAD.beam
track = MAD.track
twiss = MAD.twiss
match = MAD.match
damap = MAD.damap
option = MAD.option
] 108 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [normal = MAD.gphys.normal
] 26 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [real = MAD.gmath.real
imag = MAD.gmath.imag
abs = MAD.gmath.abs
] 64 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [tblcat = MAD.utility.tblcat
printf = MAD.utility.printf
] 56 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [observed = MAD.element.flags.observed
] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
    sample_id = 1
    sample_seed = 6379025
    dataset_name = 'htcondor_dataset/job_0'
    ] 93 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
    -- track and twiss columns
    tkcols = {'name','s','l','x','px','y','py'}
    twcols = {'name','s','beta11','beta22','mu1','mu2','dx','dy','x','y'}

    -- flag to run twiss checks
    twiss_check = 0 -- 1 do checks

    -------------------------------------------------------------------------------o
    -- load LHCB1 and LHCB2                                                      --o
    -------------------------------------------------------------------------------o

    MADX:load("./lhc_data/lhcb1_saved.seq", "./lhc_data/lhcb1_saved.mad") -- convert on need
    !MADX:load("./lhc_data/lhcb2_saved.seq", "./lhc_data/lhcb2_saved.mad") -- convert on need
    MADX:load("lhc_vars0.mad")                      -- avoid warnings
    ] 740 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [lhcb1 = MADX.lhcb1
] 19 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
    !local lhcb1 in MADX !, lhcb2

    !lhcb2.dir  = -1 -- lhcb2 is reversed, i.e. bv_flag = -1

    -------------------------------------------------------------------------------o
    -- preliminaries                                                             --o
    -------------------------------------------------------------------------------o

    -- need to create a "new" proton for MAD-X compatibility (old pmass?)
    lhc_beam = beam {particle="xproton", charge=1, mass=0.938272046, energy=450}

    for _,lhc in ipairs{lhcb1} do!,lhcb2
    -- attach beam to sequence
    lhc.beam = lhc_beam

    -- select observed elements for twiss
    lhc:deselect(observed)
    lhc:  select(observed, {pattern="BPM"})
    lhc:  select(observed, {pattern="IP" })
    end

    -------------------------------------------------------------------------------o
    -- twiss checks (optional)                                                   --o
    -------------------------------------------------------------------------------o

    function prt_qs (seq, tw)
    printf("% 5s:  q1 = % -.6f,  q2 = % -.6f\n", seq.name, tw. q1, tw. q2)
    printf("      dq1 = % -.6f, dq2 = % -.6f\n",           tw.dq1, tw.dq2)
    end

    if twiss_check ~= 0 then

    tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
    !local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}


    prt_qs(lhcb1, tw1) ; tw1:write("twiss_b1_n.tfs", twcols)
    !prt_qs(lhcb2, tw2) ; tw2:write("twiss_b2_n.tfs", twcols)

    -- if twiss_check < 0 then os.exit() end
    end
    py:send('Error Generation')
    ] 1602 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [Error Generation] 16 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
      
      lhc = MADX['lhc'..'b1']
             
      error_file = assert(io.open(string.format("./%s/errors/error_%d_seed_%d.csv", dataset_name, sample_id, sample_seed), "w"))
      error_file:write("NAME\tK2L\tK2SL\tK3L\tK3SL\n")
      ] 242 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-4.43495397306002e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-1.2592545572388751e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.3864112630931707e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-6.945266749057022e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R1"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R1 L:6.370000 K2L:-8.005746E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-4.4229322601500887e-07*k_ref*element.l/0.017
          local k2sl_err = 2*1.7179256708170163e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-9.976355977493373e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*1.371879700378368e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R1"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R1 L:5.500000 K2L:-1.373093E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*2.0348770944275635e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.1057037241016194e-06*ks_ref*element.l/0.017
          local k3l_err = 6*3.553734760852674e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*3.201834862818622e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R1"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R1 L:5.500000 K2L:-3.204665E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-2.4317691001847475e-06*k_ref*element.l/0.017
          local k2sl_err = 2*6.676136881870367e-06*ks_ref*element.l/0.017
          local k3l_err = 6*1.878240906890479e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*5.494304355267804e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R1"}

        ] 984 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R1 L:6.370000 K2L:6.378124E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.9182064597772213e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-2.999410360683162e-06*ks_ref*element.l/0.017
          local k3l_err = 6*1.0067454626284976e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-4.895387703261046e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L2"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L2 L:6.370000 K2L:-5.684174E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-2.365720219760198e-07*k_ref*element.l/0.017
          local k2sl_err = 2*-1.1425690077630077e-06*ks_ref*element.l/0.017
          local k3l_err = 6*7.726335405913536e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.6408575277969697e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L2"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L2 L:5.500000 K2L:-2.647577E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*2.1439311669453367e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-9.003945433321326e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-4.906420207268483e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-8.016545410075676e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L2"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L2 L:5.500000 K2L:8.036941E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.156853666995428e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.7996810341466306e-07*ks_ref*element.l/0.017
          local k3l_err = 6*5.3334840008922615e-08*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*8.930507134966442e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L2"}

        ] 984 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L2 L:6.370000 K2L:1.036947E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-1.8802956865977747e-06*k_ref*element.l/0.017
          local k2sl_err = 2*6.563799929391454e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-8.652481337411572e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*5.5894713448062905e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R2"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R2 L:6.370000 K2L:-6.490095E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.4758451049051938e-07*k_ref*element.l/0.017
          local k2sl_err = 2*-2.313949307666103e-06*ks_ref*element.l/0.017
          local k3l_err = 6*2.042249364940535e-22*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*7.8912761324493e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R2"}

        ] 983 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R2 L:5.500000 K2L:7.911353E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*3.100491286195131e-07*k_ref*element.l/0.017
          local k2sl_err = 2*2.893623471200644e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-2.1689712584434345e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-1.4629491934702126e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R2"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R2 L:5.500000 K2L:-1.466671E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*3.1952758590814608e-06*k_ref*element.l/0.017
          local k2sl_err = 2*4.465451581540522e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-6.021002171457291e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*3.10223015536722e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R2"}

        ] 983 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R2 L:6.370000 K2L:-3.602088E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*8.10092873079999e-06*k_ref*element.l/0.017
          local k2sl_err = 2*1.4684696827796709e-06*ks_ref*element.l/0.017
          local k3l_err = 6*1.5488318881347891e-06*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*1.3645398415303991e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L5"}

        ] 984 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L5 L:6.370000 K2L:-1.584041E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-2.82152599991132e-07*k_ref*element.l/0.017
          local k2sl_err = 2*1.1464773565146326e-06*ks_ref*element.l/0.017
          local k3l_err = 6*0.0*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-1.6270737259707268e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L5"}

        ] 968 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L5 L:5.500000 K2L:-1.628512E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-3.134495384002491e-07*k_ref*element.l/0.017
          local k2sl_err = 2*1.990626692491988e-06*ks_ref*element.l/0.017
          local k3l_err = 6*6.818741107560649e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-1.4242374017375075e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L5"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L5 L:5.500000 K2L:-1.425497E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*5.1526744388497854e-06*k_ref*element.l/0.017
          local k2sl_err = 2*2.0342216396079856e-06*ks_ref*element.l/0.017
          local k3l_err = 6*8.385444543149925e-08*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*1.4140661778449276e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L5"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L5 L:6.370000 K2L:-1.629981E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-1.2762225434808138e-07*k_ref*element.l/0.017
          local k2sl_err = 2*1.7288156424600014e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.9008341760690286e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-7.519014844831417e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R5"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R5 L:6.370000 K2L:-8.667100E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-9.781485299064785e-07*k_ref*element.l/0.017
          local k2sl_err = 2*4.7063492235778443e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-3.9734909153734776e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-3.4520424658834436e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R5"}

        ] 989 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R5 L:5.500000 K2L:3.455094E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-2.5677031664736763e-06*k_ref*element.l/0.017
          local k2sl_err = 2*3.2980186744324084e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.8970968488288968e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*1.2740724160658127e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R5"}

        ] 989 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R5 L:5.500000 K2L:-1.275199E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-6.448914424290165e-07*k_ref*element.l/0.017
          local k2sl_err = 2*-1.1745890145928836e-07*ks_ref*element.l/0.017
          local k3l_err = 6*5.058007934889553e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-2.6201525597062005e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R5"}

        ] 987 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R5 L:6.370000 K2L:-3.041633E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-6.756447729479636e-06*k_ref*element.l/0.017
          local k2sl_err = 2*2.8359067258858135e-06*ks_ref*element.l/0.017
          local k3l_err = 6*4.539309879513258e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-9.385987277265321e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L8"}

        ] 985 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L8 L:6.370000 K2L:-1.089834E-03] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*8.368261739500572e-08*k_ref*element.l/0.017
          local k2sl_err = 2*-4.941379415109378e-07*ks_ref*element.l/0.017
          local k3l_err = 6*2.5795295560654708e-21*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*3.7173217146146794e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L8"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L8 L:5.500000 K2L:-3.726779E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*9.468847484865542e-07*k_ref*element.l/0.017
          local k2sl_err = 2*4.0114927820566245e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-5.946201551090621e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*2.3793447575618516e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L8"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L8 L:5.500000 K2L:-2.385398E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*3.4526719186678473e-06*k_ref*element.l/0.017
          local k2sl_err = 2*3.551950621870121e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-5.0376916717801e-08*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*4.642761282429227e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L8"}

        ] 982 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L8 L:6.370000 K2L:5.390842E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-6.403054622715131e-06*k_ref*element.l/0.017
          local k2sl_err = 2*5.593450940345261e-06*ks_ref*element.l/0.017
          local k3l_err = 6*4.3024271662402116e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-3.0911840376794587e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1R8"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1R8 L:6.370000 K2L:3.589262E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-1.700625692066806e-07*k_ref*element.l/0.017
          local k2sl_err = 2*3.1693334655237154e-06*ks_ref*element.l/0.017
          local k3l_err = 6*-1.140440845520164e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-2.6244261998822713e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2R8"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2R8 L:5.500000 K2L:-2.631103E-04] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*8.317865079927529e-08*k_ref*element.l/0.017
          local k2sl_err = 2*-1.1979189508896433e-06*ks_ref*element.l/0.017
          local k3l_err = 6*3.0659152153065474e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*8.902550470277736e-07*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2R8"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2R8 L:5.500000 K2L:8.925201E-04] 37 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*3.6797064700726835e-06*k_ref*element.l/0.017
          local k2sl_err = 2*3.790959064770702e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-6.269982580526169e-08*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-2.1738611097358712e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3R8"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3R8 L:6.370000 K2L:2.524132E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*8.308359354774725e-06*k_ref*element.l/0.017
          local k2sl_err = 2*7.922112989200018e-07*ks_ref*element.l/0.017
          local k3l_err = 6*5.654387839829581e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-8.576699592888407e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.3L1"}

        ] 983 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.3L1 L:6.370000 K2L:9.956356E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*1.8667403549704758e-06*k_ref*element.l/0.017
          local k2sl_err = 2*-2.2030697482569725e-06*ks_ref*element.l/0.017
          local k3l_err = 6*1.166545454067542e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-3.6575180407506676e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.B2L1"}

        ] 988 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.B2L1 L:5.500000 K2L:-3.660751E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-2.5192703530389003e-08*k_ref*element.l/0.017
          local k2sl_err = 2*-1.1088588703879053e-06*ks_ref*element.l/0.017
          local k3l_err = 6*3.070599643088936e-20*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-2.4714079990775874e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXB%.A2L1"}

        ] 989 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXB.A2L1 L:5.500000 K2L:-2.473593E-03] 38 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
                 
        local function set_error (element)
                
          ! Making absolute errors
          local k_ref = element.k1
          local ks_ref = element.k1
                
          local k2l_err = 2*-3.926612090480631e-06*k_ref*element.l/0.017
          local k2sl_err = 2*7.681026146005778e-07*ks_ref*element.l/0.017
          local k3l_err = 6*-5.310007342155653e-07*k_ref*element.l/(0.017^2)
          local k3sl_err = 6*-5.9919027111542874e-06*ks_ref*element.l/(0.017^2)

          element.dknl={0, 0, k2l_err, k3l_err}
          element.dksl={0, 0, k2sl_err, k3sl_err}

          error_file:write(string.format("%s\t%s\t%s\t%s\t%s\n", element.name, k2l_err, k2sl_err, k3l_err, k3sl_err))

          !py:send(table.concat(element.knl, ", "))
          py:send(string.format("%s L:%f K2L:%E", element.name, element.l, k3sl_err))
        end

        local act = \e -> set_error(e)
        
        lhc:foreach{action=act, pattern="MQXA%.1L1"}

        ] 986 bytes
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [MQXA.1L1 L:6.370000 K2L:6.906812E-03] 36 bytes
***pymad.recv: binary data 4 bytes
***pymad.recv: [
             
    error_file:close()
    -------------------------------------------------------------------------------o
    -- twiss checks (optional)                                                   --o
    -------------------------------------------------------------------------------o

    if twiss_check ~= 0 then

    tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
    !local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}

    prt_qs(lhcb1, tw1) ; tw1:write("twiss_phase_b1_n.tfs", twcols)
    !prt_qs(lhcb2, tw2) ; tw2:write("twiss_phase_b2_n.tfs", twcols)

    if twiss_check < 0 then os.exit() end
    end

    --[[ ref values
    LHCB1
    q1  = 62.27504896
    q2  = 60.29512787
    dq1 = 15.1778898
    dq2 = 15.21652238

    LHCB2
    q1  = 62.27115164
    q2  = 60.29725754
    dq1 = 15.15613102
    dq2 = 15.23680003
    --]]

    -------------------------------------------------------------------------------o
    -- match                                                                     --o
    -------------------------------------------------------------------------------o

    -- knobs families and sectors names
    local knam = {'all_lhc'}
    local snam = {'error_triplets'}    
    local gfs = {"011100","012000","100200","101100","102000","210000","300000","001300","003100","004000","021100","110200","022000","112000","130000","200200","201100","202000","400000","310000","001200","002100","003000","021000","110100","111000","200100","201000","011200","012100","031000","013000","100300","101200","102100","103000","120100","121000","210100","211000"}

    -- index of (IP,GNF)
    local idx_n = #gfs
    local idx_f = \i,j -> 2*((i-1)*idx_n+(j-1))

    -- loop over lhcb1 and lhcb2 ----------------
    for _,bn in ipairs{'b1'} do !,'b2'} do --

    !local lhc = MADX['lhc'..bn] -- current sequence

    io.write("*** Running ", lhc.name, " ***\n")

    -- BPM Names

    local bpm_names = {}

    for i,element in pairs(lhc.__dat) do !ipairs(tw1:getcol'name') do
    local name = element["name"]
    !print(type(name)==string)
    local typ = tostring(type(name))
    if typ~="nil" then
      if string.find(name, "BPM")~=nil then
        table.insert(bpm_names, name)
      end
    end
    end

    -- list of IPs and GNFs
    local obs_points = bpm_names
    obs_points[1] = 'IP1'

    ! First we need to cycle, for that we need a marker such as IP1, afterwards we track

    -- list of all knobs
    local kn = {}
    for _,ks in ipairs(knam) do
    for _,ss in ipairs(snam) do
    kn[#kn+1] = ks .. '_' .. ss .. bn -- knob names
    end end

    -- create phase space damap
    local X0 = damap{nv=6, np=#kn, mo=5, po=1,
                    vn=tblcat({'x','px','y','py','t','pt'}, kn)}


    -- compute RDTs
    local mthd = "trkrdt" -- trkrdt needs new release of MAD-NG
    local function get_nf(mthd)
    local nf, mth = {}, mthd or "trkrdt"

    if mth == "cycle" then       -- 1st method
      for i,obs_point in ipairs(obs_points) do
        io.write("** Tracking ", obs_point, "\n")
        lhc:cycle('$start')
        ! Cycling can only be done in marker points, not elements, such as IPs,
        ! end or arc markers (CHECK WHERE IS SHOULD CYCLE AND IF IT AFFECTS THE WHOLE LHC)
        local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
        nf[i] = normal(mflw[1]):analyse();
        !nf[i].a:write("A_"..obs_point.."_cycle")
      end

    elseif mth == "trkrdt" then  -- 2nd method
      io.write("** Tracking ", obs_points[1], "\n") !obs_points[1] must be a marker
      lhc:cycle(obs_points[1])

      local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
      local nf1 = normal(mflw[1]):analyse()

      io.write("** Tracking RDT\n")
      local X1 = nf1.a:real():set0(nf1.x0) ; X1.status = 'Aset'
      local mtbl, mflw = track{sequence=lhc, method=4, savemap=true, X0=X1,
                              range=obs_points[1].."/"..obs_points[#obs_points]}
      for i,obs_point in ipairs(obs_points) do
        nf[i] = nf1:analyse('gnf', mtbl[obs_point].__map)
        !nf[i].a:write("A_"..ip.."_trkrdt")
      end
    end

    return nf
    end

    -- run once for reference values
    local nf = get_nf(mthd)

    -- monomial strings for all knobs
    local ks, ki = {}, #kn
             
    for i=0,ki do ks[i] = nf[1]:getks(i) end

    local f = assert(io.open(string.format("./%s/samples/sample_%d_seed_%d_%s.csv",dataset_name, sample_id, sample_seed, bn), "w")) !Different csv for each beam
    
    !Writing column names
    f:write("NAME\t")    
    
    for j, rdt in ipairs(gfs) do
      f:write(string.format("RE_%s\tIM_%s\t", rdt, rdt))
    end
    f:write("\n")

    for i, obs_point in ipairs(obs_points) do
      f:write(string.format("%s\t", obs_point))
      for _,gf in ipairs(gfs) do
        local v = nf[i].gnf[gf..ks[0]]
        f:write(string.format("%12.4f\t%12.4f\t", real(v), imag(v)))
      end
      !End of row
      f:write("\n")
    end
    f:close()

    end -- loop over lhcb1 and lhcb2
             
    py:send('Finish')
    ] 5081 bytes
*** Running LHCB1 ***
** Tracking IP1
warning: undefined variable used (zero): lagrf400_b1
** Tracking RDT
***pymad.send: [str_] 4 bytes
***pymad.send: binary data 4 bytes
***pymad.send: [Finish] 6 bytes
Error Generation
MQXA.1R1 L:6.370000 K2L:4.832294E-03
MQXB.A2R1 L:5.500000 K2L:3.291859E-03
MQXB.B2R1 L:5.500000 K2L:-1.204667E-03
MQXA.3R1 L:6.370000 K2L:-8.345099E-04
MQXA.3L2 L:6.370000 K2L:2.464374E-03
MQXB.B2L2 L:5.500000 K2L:-5.493689E-04
MQXB.A2L2 L:5.500000 K2L:-2.818708E-04
MQXA.1L2 L:6.370000 K2L:-2.669075E-03
MQXA.1R2 L:6.370000 K2L:-7.400772E-04
MQXB.A2R2 L:5.500000 K2L:1.221668E-03
MQXB.B2R2 L:5.500000 K2L:-6.757130E-04
MQXA.3R2 L:6.370000 K2L:1.476728E-03
MQXA.3L5 L:6.370000 K2L:-2.580899E-03
MQXB.B2L5 L:5.500000 K2L:-5.725677E-05
MQXB.A2L5 L:5.500000 K2L:3.252424E-04
MQXA.1L5 L:6.370000 K2L:-5.829117E-04
MQXA.1R5 L:6.370000 K2L:-1.622990E-02
MQXB.A2R5 L:5.500000 K2L:1.225273E-04
MQXB.B2R5 L:5.500000 K2L:2.631671E-04
MQXA.3R5 L:6.370000 K2L:-7.984801E-04
MQXA.3L8 L:6.370000 K2L:-3.332079E-04
MQXB.B2L8 L:5.500000 K2L:-2.033793E-04
MQXB.A2L8 L:5.500000 K2L:8.261536E-04
MQXA.1L8 L:6.370000 K2L:2.619715E-03
MQXA.1R8 L:6.370000 K2L:5.783534E-03
MQXB.A2R8 L:5.500000 K2L:-7.624840E-04
MQXB.B2R8 L:5.500000 K2L:1.774973E-03
MQXA.3R8 L:6.370000 K2L:1.596824E-03
MQXA.3L1 L:6.370000 K2L:-7.825439E-04
MQXB.B2L1 L:5.500000 K2L:2.815759E-03
MQXB.A2L1 L:5.500000 K2L:-3.126388E-05
MQXA.1L1 L:6.370000 K2L:1.095694E-02
Finish
Execution time (s):  70.47547507286072
Error Generation
MQXA.1R1 L:6.370000 K2L:-8.005746E-04
MQXB.A2R1 L:5.500000 K2L:-1.373093E-03
MQXB.B2R1 L:5.500000 K2L:-3.204665E-04
MQXA.3R1 L:6.370000 K2L:6.378124E-03
MQXA.3L2 L:6.370000 K2L:-5.684174E-03
MQXB.B2L2 L:5.500000 K2L:-2.647577E-03
MQXB.A2L2 L:5.500000 K2L:8.036941E-04
MQXA.1L2 L:6.370000 K2L:1.036947E-03
MQXA.1R2 L:6.370000 K2L:-6.490095E-03
MQXB.A2R2 L:5.500000 K2L:7.911353E-04
MQXB.B2R2 L:5.500000 K2L:-1.466671E-03
MQXA.3R2 L:6.370000 K2L:-3.602088E-03
MQXA.3L5 L:6.370000 K2L:-1.584041E-03
MQXB.B2L5 L:5.500000 K2L:-1.628512E-04
MQXB.A2L5 L:5.500000 K2L:-1.425497E-03
MQXA.1L5 L:6.370000 K2L:-1.629981E-03
MQXA.1R5 L:6.370000 K2L:-8.667100E-03
MQXB.A2R5 L:5.500000 K2L:3.455094E-04
MQXB.B2R5 L:5.500000 K2L:-1.275199E-03
MQXA.3R5 L:6.370000 K2L:-3.041633E-03
MQXA.3L8 L:6.370000 K2L:-1.089834E-03
MQXB.B2L8 L:5.500000 K2L:-3.726779E-04
MQXB.A2L8 L:5.500000 K2L:-2.385398E-04
MQXA.1L8 L:6.370000 K2L:5.390842E-03
MQXA.1R8 L:6.370000 K2L:3.589262E-03
MQXB.A2R8 L:5.500000 K2L:-2.631103E-04
MQXB.B2R8 L:5.500000 K2L:8.925201E-04
MQXA.3R8 L:6.370000 K2L:2.524132E-03
MQXA.3L1 L:6.370000 K2L:9.956356E-03
MQXB.B2L1 L:5.500000 K2L:-3.660751E-03
MQXB.A2L1 L:5.500000 K2L:-2.473593E-03
MQXA.1L1 L:6.370000 K2L:6.906812E-03
Finish
Execution time (s):  88.90963244438171
/afs/cern.ch/user/a/aborjess/work/public/mad-linux-0.9.7-pre: madl_pymad.mad:370: unsupported data type
stack traceback:
	[C]: in function 'assert'
	madl_pymad.mad:370: in function 'recv'
	madl_pymad.mad:332: in function 'run'
	madl_pymad.mad:345: in function '__ini'
	(command line):1: in main chunk
	[C]: at 0x00460ed0
/afs/cern.ch/user/a/aborjess/work/public/mad-linux-0.9.7-pre: madl_pymad.mad:370: unsupported data type
stack traceback:
	[C]: in function 'assert'
	madl_pymad.mad:370: in function 'recv'
	madl_pymad.mad:332: in function 'run'
	madl_pymad.mad:345: in function '__ini'
	(command line):1: in main chunk
	[C]: at 0x00460ed0
